{
	"info": {
		"_postman_id": "ab5093ec-a859-4cb0-ae35-b4fb3c9c966b",
		"name": "3 MB Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "377e9758-7ea2-4e7a-a74d-81f0ac0d1f30",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0098f645-b7e9-4d76-b1b4-2abac51c954d",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8545f6fb-6986-415b-8153-e27eee554449",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "af217103-74ce-4956-8389-3cfdde11c707",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6fd98dfa-d039-462d-ba1f-c5630e436344",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1ce97e75-8621-4c7c-97d9-8fbfb63c061c",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "487c8b63-445f-4fee-9e00-b2d2cba0a30d",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "158cc4cb-64d0-43b7-b1e1-f079f77e0d78",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "52af6141-1e68-40ae-bd8d-7206c1471e39",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "44288812-28d7-4a73-8bc6-38a7d1576a1b",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fb7b0878-6768-4e44-9ef4-a852dbda6cac",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "09c39ef0-9a47-4fd4-a812-d2df1bdc363e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b357817a-aa7e-4aeb-82a6-dcab1704bf28",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "37c52335-8d92-4d1c-82bc-49d49ff52ed2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "02bef318-029c-4b88-ae80-25d38538b393",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "52422fc4-758a-4717-96e4-4ad3762fa7b8",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7cdb26fe-6973-4b53-8791-ccd283df50b5",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5945b5a1-4215-474e-be8a-99ee2ff74146",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "32348f38-431a-4ec5-baf4-ef7d3556d08a",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "965403d3-cf1d-46e1-a8e5-1c11e59e50a1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6f72e4f8-8611-4aa7-947a-6e90308f01a6",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1e3f19c4-24e8-4d75-b9b9-daa5d01a7511",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cb682ffa-15ae-4554-8b24-05512aca89df",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6696fc19-193c-474a-8cd9-8e72564a12bc",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "74f11236-cb0e-4f4a-b6ac-4a29c4ab5bca",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3b09304f-235b-4337-843d-9c44073433f9",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7f41dbe5-a75c-409d-a024-bbde2539e1e1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3bb1b965-e83c-47a1-ae2b-f4329ab682ab",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "30b5034a-1878-46f4-96d9-51cab05becc0",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c91c8bec-ebe9-4591-833d-1735ccba396d",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d996d801-db71-4f52-80f5-1abdabbfe4e6",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "439e1472-cd0a-420a-9d77-ef8bb51f9ab9",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "95d3ed80-651f-445d-ad18-d02c0c098155",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "788b1e88-5ed8-44d5-92c1-230aa3ff27df",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fd159467-27e5-4013-8957-e90e30ba3381",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0eed54b4-5728-44dc-8d67-1e9aa0c0d79e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3e136c95-414a-40ee-a683-3aaf74fbedd7",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7a4a1bac-5be9-4a21-b9ab-9606a8d8df3e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7b684e33-b0a2-4d39-baa2-72983f5f37e4",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0ae1b559-6b16-4989-ac3c-d59afcb7ed67",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9a4470b6-f607-421e-878a-820a493d01d5",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3d65b10e-5fe0-4918-b14c-fc35e91635ec",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d0ec481e-7259-4c3f-82ce-4acc43bb270d",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "be633de7-f397-4e26-9f3e-97adbdca0fc1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "73441fb6-b4fe-41cc-a222-8bba664451b2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "60b75529-9529-4469-97a3-a0fcd2d14cb7",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "934ce21b-340f-4021-9515-f002c4b56866",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8859f61d-a4ff-47df-9efd-224fe8537214",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "756178fa-d4e5-4333-8205-4260da581c12",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "434d6429-2aaa-4a7c-900b-db12f6b5cb42",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f06e16ee-ddaa-4d46-81ad-4ad2f23b3fca",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "343b5055-a62c-473f-8120-cc02073afac5",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0ca831e2-f87d-4f51-b0f2-fe208c200db4",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "19d5e1d5-aad7-4467-99bc-150d7e614131",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8f9f92ed-80e2-4f64-b021-43a2348b469f",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d2dd31bc-4227-4950-ace9-27340a0ae1fc",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2cc55514-e4ce-49eb-a17a-bdcfa1f664bf",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b9ceb859-93c6-468a-ad71-18eab79a0708",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "bc9355de-f875-454f-8807-4b674bb66d85",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a4958b56-5357-4299-9964-bf8172ad3b1f",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "733ed358-677a-445c-8cb7-c8fdf608a507",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ef07a1cd-6586-468f-a37f-3850649a3c4b",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b8614b23-9e75-4e32-854f-a4a5111b69a4",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c6e07537-9ceb-42d7-b2dd-60a2e6c628e4",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e91bd61f-31e8-4493-8ea8-d6a2a7c5fbfa",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "458999ed-e790-46cc-a511-300ce58e586e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f44fed1b-4f0d-4bcc-bd00-8f6ea50df961",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "90560977-b63d-482b-a486-185fdbcebd3b",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "648cb4ca-9a95-4c93-975c-1865044281ee",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6b145ca4-03d4-437f-9d8b-d4d3a74b4a32",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2c5c32dc-7e44-43cf-9eed-e805860fe700",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "60b630ce-b63a-47bd-83b0-c0d21da4113b",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4a327352-d394-459d-bb02-5304fb4ff988",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "84248c51-6f1a-470d-9976-4be7446beb9b",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "782632d6-9384-40ed-beb2-0a1c07a8d437",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c400ef82-3096-4664-89f4-12db20d2a75b",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "91101c7d-3b77-468d-b7ee-b5fdb46ab230",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c03ef467-e198-4a37-86a4-fea51a1295f4",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "dbf2b9b2-515a-4cef-80aa-374b25e8e0b1",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c0499f37-4e6c-4ff8-9959-7ec4bde19e0d",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "dd898637-d502-4494-b59e-f06f7b7859a1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ef5d45b0-bea4-43ba-a768-3aa1e959eedd",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b54d4c3f-43a0-4da4-99cb-70af2df92a1a",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3879892e-39a0-4466-8f7d-3ab8a800b274",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "63a2f3c9-b5c6-4c2a-9fac-dcbb050b032f",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "044afa56-22f2-42ad-885e-e2f0d7a62e68",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b58b76b6-9b5a-4fa3-a017-57a97b7d667a",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7e226534-f0e0-4014-85b2-2fe24b5c2f11",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "255c5d9d-07ad-4491-9edf-ba49ebc899fe",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "abc34b49-c264-4543-aeaf-ccada718c351",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "66328355-3258-4c68-9630-256a7f7557ad",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e36d6601-cc3f-4a09-860e-fa332fc123d1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1619ff11-13b9-48d1-b3a5-f225907de7f1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d62253c6-b13f-4118-8395-436865533eb7",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "85663785-5e2d-4a10-a585-34823c2aa0ce",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "aa2be3ef-4cd6-4e45-8fd2-9aa208676c38",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8c7d63b7-bd41-4089-8bb6-1670eef2e483",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ba1a44f3-1752-4685-accf-e0bce385bd55",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "14e3fc9a-e110-47b4-9915-71376f6813ef",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1ce48942-4305-4c13-83bb-df0c375524c6",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a7fbc15d-c958-4a0f-b36f-1499401d41c7",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ddc5f3f8-c8ea-4d48-bd56-73a3e11674da",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "548a0be3-e527-4122-93a2-11757bd49568",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f0ee5a05-f630-445f-9317-a31b3c2d215a",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "91f182de-1caa-441f-b118-9e41574614cb",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ed16f875-71e7-41e9-86d7-22dc94d5f8cc",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "bfe0a74c-88d9-45e6-9a9b-04e9d38089fd",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "92bd1c60-02bf-4806-b0fc-2b00e9367f80",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "20624f8d-1b31-4399-a746-bb4178f441c2",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2d7eaf1a-6f37-4b2d-9240-316ae24624a3",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "25386402-a183-4636-ab75-8ebba3fb5f4b",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fee4e8f4-f1b5-4b74-84a9-5aa9f42e790d",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8242bdf2-8959-4e78-9511-4189af212e98",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f583804a-4719-4fed-b11a-b34ac7641958",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3f3f07ae-f0e0-4e66-912a-01a4e33e3910",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3f523307-20b0-4fb0-909a-7c6826797d9f",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3281472b-7ee7-45fb-b909-c25f1f1565b9",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9c2f0027-493b-4d28-9ba2-5cc67ceee9ed",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3908491e-69a3-4f6b-b7a7-391b485aee37",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "358ffa3f-aa08-46c6-91c1-479d7f3dbda9",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5d7fe428-770b-4d3b-a772-6197c58b6851",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "73795cce-1540-49f6-8e82-a6a4f455ddc9",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "188de0cc-4e0c-480d-9385-c974c17646e1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "28479716-9f15-4ae8-92c0-d1c5ad803ab6",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "55643840-5ecb-481c-9b82-cd53b93cfa94",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "90e505d2-dc92-447c-a43f-2455298698b9",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f5408fdb-3fc4-452a-bbfc-46dfe5539f4f",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "16ca91d6-097f-47d5-ae12-c9dec6ce1c4e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5e368794-a91c-4e8b-98d2-7f7c50e724f5",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "46344793-994e-42a9-bfab-b928b017ff99",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "27579fc3-df52-4312-9bb9-d63db4f3b133",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1f86e704-d5d2-4189-b177-0c0e8b21cdfb",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0edc5a62-fd03-49b5-9eb2-2172e513584e",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "20d1f4c2-e732-4f78-8aee-37f076f1eb5b",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "03cbc1c5-6955-4cdd-a9e6-e274d400cd68",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "70a3f971-8deb-4be1-b231-fb86eb6a5d1f",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4b1e7dd1-17b4-4a43-bb25-359648e69288",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "be11225e-e1ed-4b4a-b6c1-b0aba9ab3442",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7fc3ee68-9625-454f-90b4-7284972654b4",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "56bc4467-1f8d-4226-bc6a-c16752a4b974",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1e830935-7c0c-4c42-9d48-afa2743e8d5b",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1b9f821c-4ab2-4674-99c9-07eda83da2db",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7065c315-fae0-4590-9140-7547ba427a85",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5264f939-ac3e-4791-94eb-f19049f5d076",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9e8c18eb-1ceb-492b-adc6-6217e9373ea3",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "28b62911-848b-48d0-ad97-73ba020f035b",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "570fdbb3-1d3b-45cb-bf85-2873b0993d62",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "27f9128f-970c-464c-ac6c-759eba8a53a4",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6e0eb6f3-31f5-45fe-9f0d-a564dc326702",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "95bf014f-1420-4d1b-bcb7-a0aa000bd655",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c3dffe64-9e60-4827-8955-24da66859a8a",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2e51da41-94db-48ca-af10-251f6ee17a75",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a31fc941-5d89-416f-90ff-38c4ee8a3f61",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "71814e23-e2ce-45f5-9bd4-a08c31f299bc",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8d0bb158-52c4-4c24-97b5-f213bd2439e4",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a35fa124-bb67-4d0c-a485-bab545662bca",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "26cacc88-9efa-4317-9166-dabb92cf73bf",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "84dec736-3292-4ce2-b607-134d440705f8",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "30e3e397-bee7-4ee1-9624-7c3a935e000c",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7a382971-815b-4b8e-8dd9-3ae76d687a9b",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b94c5a4e-674d-40e3-bc5a-321ca6bf994c",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d3604439-1bd8-4841-954f-67d511a48384",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5efc749c-12c8-40d1-8571-3a0706929106",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d5a4a14b-2721-421e-9b7e-9138603c517d",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "91f29ce6-abdb-4f84-8005-f403613627d0",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e1910aa4-980d-4079-b3b4-070355c62774",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3cf9e9d8-a5a0-47d9-89e8-1e66abb717da",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "311e302a-5910-45a3-a8a8-8b7ae1c9524e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b9a1f010-0283-47ce-8ced-c3133c055f9f",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fbc1e40a-c94b-4d05-a690-190245a06c51",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fb765267-5382-4e14-81e3-2e244a6b0548",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "40756e31-0383-47b7-8fd0-8ac1753d1137",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a83eecfc-4c59-46c2-b090-e2122863da8e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c500cb7d-1f2f-439c-af34-85b3909f74fd",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "abc43653-f2bc-4791-90d4-e4571fb89bae",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "70e4fa2f-96d6-4566-b0a4-3dc43e9ae8bc",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "02c2970b-3dfc-4906-81e2-b3bb269ba0a9",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3efd149c-9153-4ebb-95cb-29dbe57bb4b2",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "08986143-a629-4ebf-8b4b-cde4e374f613",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a5dc4496-e1f3-4649-8e4e-4d1d4130ca4a",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "03d67ed1-6340-425d-963f-5699e51350c9",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "190f8743-a4b0-4d85-a206-65a8c4a0ae4c",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3c29f27b-4f1d-4839-bf88-4d30a913cf6d",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "82311bde-5a86-4e2a-9ddc-fa914fccda94",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2a948816-e293-44fa-9aac-ce34d1c31f45",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fd8a2139-3002-48fe-a5fb-733bee9e9e83",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "289af76e-0f06-46fa-8154-3a85e73eb086",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ce05eb5c-9a1e-4f92-9f86-c7e40dbf620f",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "66825a3e-eb77-4f18-a3d2-6c9770bf60ec",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e350632a-2d7a-469f-86fc-afb7fcb96658",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cc38ec7f-cf29-4e77-8b2b-7b49852f56dc",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "99a4d587-abd8-429a-813b-c54a04e17c5b",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "34387915-1b79-4267-80fe-cac3d4125be1",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5830b8ca-496a-4550-857a-13cf12b3a5e3",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "67f96c53-e8a6-4462-9bb5-7b8378cceb62",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7c0a4551-5731-4288-902c-a184f73d4417",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f2007aa8-fa90-48c6-be9d-40b16b05046b",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "afdf98d5-afe4-4160-b8ea-125995bf53a4",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9770ae4c-6dbd-4d91-a12d-12b5eed2a76c",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "da7a6e5f-49e3-4b82-80de-5936c0663cec",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a9a067a0-a304-4e5f-b04a-c0f6d74c97cf",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8c90c9a2-7c3e-4b4c-b6b3-6cdcb0acf635",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f4842c3e-53b9-41cd-a3c2-caf3fca7d9cd",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "737d5950-3ccb-4500-9e1d-057671bf0dc1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "dae8fa8d-8664-4c4a-8fbf-490b39bfe207",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "bd7a55fd-9d0d-485d-9113-d2e20b085c64",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "86433a7a-ce31-4d58-b6f5-b5e03758730f",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7a48afb4-1b71-4667-8d05-e445abde2459",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9f473a95-fccf-426c-98f2-b44d71a2b36c",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d411b178-45a1-41c4-9afd-098f19634eac",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "25b948c8-2a5a-47eb-9fc2-c0404f0fb530",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "12de7a81-087b-4d5d-b963-f1c79cd2012d",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e4c7fa2a-baa3-446b-aa9f-19a82203a06d",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9610ed5a-5a10-4662-b514-1c817dbb9902",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0a7ce6a9-1b8d-493f-9de5-b1c155936a85",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1cdd2757-0084-4bb6-a0e9-fd809e0413fb",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "99dd6293-50d4-461c-b24a-0a8b5d772445",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9612f23f-93f5-4b20-ae4c-87ce4c982303",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1fced939-a7db-4af0-bc43-900a75c87cf5",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1bb5f1f1-b926-4a9e-878e-e0b069fce351",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "11d32d5b-3ae0-4b43-891a-405dc2cda070",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b7eddad1-b74b-48ea-8072-01540a2da9e9",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "23d909b3-87c2-4ab7-8b73-d19a0752d737",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f40b23bc-9cf6-4140-85bf-3c3ddf1a35c2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2d9af517-36a4-475f-ade9-0fffa003b7a6",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "db046a12-bdad-4c1a-a098-355164431243",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e5423310-c89d-42cc-b3cb-32cd021f4ccb",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1c5dafb4-cbc9-4547-bc5e-b3a819d06ed5",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b1fe6160-65ff-48ad-8702-76ac6cfd996f",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b47058ac-8fe5-486a-9849-c7d349543609",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "237437fc-6b24-48c2-b02f-4064826cac95",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1ddc2143-74b5-42a3-acb3-653e405442e0",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "352f22a5-404b-4838-97d0-2398d8b1388f",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ff836479-e719-48e9-ac81-da14396422fa",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b9213a1e-fc2b-47fe-9e9b-f4b3f44e6df9",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6fb39e82-880e-4bdf-bda2-ba5ea0d5865d",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "20bc1a20-868e-40c1-a2e4-87fa84089dcd",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "59a1ca02-6aaf-4508-a1df-bd5d45605ac2",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c2bcebb7-a493-437e-acc6-0330c4890a75",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9415ecbe-84ea-4b94-9661-e758afece5a3",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "60257342-fb42-4b3f-a357-13ffddb9c45f",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "820c45f9-492b-441e-b98e-bafe60571f72",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "edc6b5a4-984d-4585-8363-f9d1e13c42ca",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "54dedd15-3a77-4845-9195-edd849d66088",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4d383719-a7f4-4481-9753-7a8366fd0f55",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cf5c4851-ba2a-4b40-91a3-af3888b41f0d",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c7634f3a-b24b-4848-aa25-a3185c69d8d2",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c38600dd-a6f4-4e65-b25a-9dcb38797f67",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a30aaa58-fefb-46d0-8c36-c93a375ffefe",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8b8b9115-67f8-4b36-a6be-c1a88be43dae",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0485ad41-d589-4961-bde5-30645c370581",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cdcfd35d-aacd-49f6-99b9-7ecdd749c421",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "920b2114-db2b-4a5d-b851-09f53965246e",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ef1dbc37-dab1-49c5-832b-d63fecaba67e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a5236595-4cf5-4c1b-8e85-956a7654315e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "abc5950b-0a7f-44e2-9351-b0c6dc8075df",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "af907856-a24d-4610-8fab-7e612bd4c758",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4a36c601-5a89-4d9b-a65a-acdf64ff2809",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2e695859-c69b-4405-8975-c16bec57053d",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "55c4b888-43c0-45bd-8ff5-6b1be673b985",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0487d8bc-7970-4d04-a02b-5d640630708b",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5ad2c1af-10cb-477f-8a43-88fdb221df9e",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e2737750-e287-4ddc-9f80-0f97c5957cf3",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a47d8baa-18e5-486a-9715-a00616c8e26f",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "bc643bef-307c-4a37-af69-532d90e6b4da",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6c73ab81-e474-43b6-ad7a-39aae25b376b",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "34244367-ec28-4da4-a487-8c61dd00609f",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "00180a42-c986-43bd-acf2-d5e5c17adf92",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9f8f85cd-6243-4ce8-8685-c28364edbed4",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5e7ee2b2-6935-437d-9b0f-0469a9fb7286",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5f1cd90c-acb8-48a1-9572-6c3dde6391fa",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e89cd92a-2b5a-4de7-9343-3db03d3b0dd6",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "da075e50-3239-45f9-a3af-fd977cb16136",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "dcbf3f06-4ab4-49a7-8957-affeae4c97da",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "75ba4de3-845e-4bfb-9493-a31c7e101eb7",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d0d8097c-2754-4fd6-abe2-a9e0325b7e9e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a57cddf8-8e9e-4789-b8c9-b89c410c664d",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "111668fd-4cd6-41eb-86ab-606d7a9dbd90",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f14ef327-e368-4f67-bdcf-a464d47f58b8",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a9e3a291-3a0d-42d2-9524-aec8ab38c11d",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "325ad904-c1ca-4ad8-b41c-9abb87a21ba2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e306f904-58f3-4849-9d46-e65d330aa94c",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d7e47ae3-3e70-40b6-9d6c-52119d4cebc7",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "19c56734-ec1f-4a57-8b43-e9b7be8c33bd",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ebbc9904-6a14-40d4-873e-d5d94a981596",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "418f7358-9033-48e0-ab22-de9bda176bdb",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4b8db2cc-f42d-41de-823c-02c31c1aa71f",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0ef1f84c-fb3b-40ba-8a1d-4d6ae12c240d",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9c363c5d-be0b-4511-94d0-2f854548fe53",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "86796228-63e0-457c-bb4c-19ff4e56fb58",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "883e9de2-bd77-4259-8832-2dd22bfc685d",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "87f65066-faba-4597-ab67-343f7640ffc5",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "69174c34-9ea3-4d9d-b5d7-d572b870f346",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6fe4da07-a117-4822-8211-a419a55b774e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e2ebc10a-354d-44be-a12a-10e917e085c9",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3b190a05-0091-4de0-bdb9-8b2a2239b829",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "127c5d8d-aa97-4606-ad09-d3aa5e6e9832",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "93f026b0-ef03-400b-9154-c65680d8b7a4",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3fbcbcc4-de12-47df-ad47-102651277834",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b415acc3-0d3d-40fa-80c4-e06d1fe0e9ae",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "31c34f2a-2882-4136-b2e9-5d7885c93614",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "93787392-9429-4c8b-9572-5aaa47052c1d",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "872f009a-e2c1-4833-b32b-22e46de47b8f",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "eb548803-f24f-4863-a7ae-a3aeb2ce23eb",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "637e31a8-2b6f-44e8-bd87-383f12712779",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6816e7a2-44fb-46f5-ac6e-a4364bc1e888",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6424bc0f-2a22-4dff-a67b-94cc2991e0fd",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "61ff7da0-d6a4-49c4-8e71-5d923a75b8e5",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c9ab4ac9-8d84-4340-8027-7ad019495779",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "aeec5ef1-d79a-43c9-a43a-364222d097d7",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "04dcce6b-f572-4c29-a4d1-25b4fbca6ea9",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "28e009b8-1e01-46e2-801a-06ab67edffe4",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0aceac72-7232-416c-a671-97f71b63d9dc",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7c4b8a31-fe69-448d-b714-ac08b37aa8bc",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "498cd018-4bfd-4ce9-a8a3-2b0a508c9d30",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "92f14cf6-6d1b-4105-8017-9f022e303c10",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7a7e777f-ede0-4c80-a8bc-e77c2f9991f3",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3dd5df2a-2c6e-45e3-84e1-d3376e31c53f",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "83746edd-4ecb-4c78-8714-a1a2e8438e9e",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1b1a221e-8f11-4cdb-ba95-876daf22a76d",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "732baaf2-41ad-4061-8349-f1be0fb38037",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "50e5265a-a838-443a-9c01-193e79947d02",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2072cf55-c19a-4a26-914d-045ac763991b",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "154a16ab-bf94-4f95-b1dd-ee8e4a563ddb",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "066cd753-2aca-45f8-9cbf-04ad15b5765b",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ffa17a38-8d4d-417a-9a87-95cbd4aa5e97",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fa6a1775-07a5-485a-b3fe-597d7e616b0c",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2eff7a70-a98c-447e-bcb7-e42f3b88e199",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "29c88166-980b-46c6-83d1-64a92b302847",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6cc824d1-2339-409d-9752-81ca4488d008",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "391c38ff-dcf5-401c-86e4-033672e2dd11",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e63137d8-66d0-4009-856b-d5ab4060e954",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "feb5e81f-d1f0-4ba0-962d-92c6528ed648",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ffdc0604-c2e1-47f5-9c1d-e87e0c1e2b10",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e93f8c1c-f579-4f27-b88d-57563018e415",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "75332813-85f0-4d4b-b5e1-f8adea52ff79",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "31ffc212-c521-407f-b6a6-0f3b3ea80bd7",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ca520984-0662-48d4-8713-23cad90b5c72",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ec439870-6c97-40e9-9bad-de20c7e260ff",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a0c3db59-6cd6-4a13-b49e-c685c0bf34f1",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "04ccf876-6898-42cd-87b7-56bcbc987c2b",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "21fa7d5a-3d7f-4262-8784-d48291b94cc9",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1046b949-634f-46c5-84b2-e0a32038aca8",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a78ba460-28a8-484b-83a0-22660f27c49e",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2a1e0d78-e465-495a-9eb0-b452e47a0545",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "06bb5e2f-5f40-4208-9944-78f61b2754fb",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7ed806ad-a843-40b2-8e5c-8f580a6fc6de",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a760b637-fa1e-4386-8aa6-6499dbaebd52",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "111eb440-2e65-422e-a804-0fdab5e6ed32",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c909c16f-b998-4d51-b76c-8965336951d9",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "e36b2d10-e686-4a89-8d31-68c6392c7075",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "2544d7e4-92c1-4443-bae5-7769cd8b57fd",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "34da11a2-56a4-4777-ad33-e723f8431c09",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "21dbe61e-799f-4238-ac7b-61ff8037ac0f",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e2abd202-5f2a-4e79-946c-8878edf32441",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c6886ae6-f70c-4fd4-8bc4-01c4830d950e",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "96dc6e71-a04a-40fc-8872-425f1f23daa5",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "750dbb87-00db-4a8d-ad78-b193eb63c6c1",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "ad0cacf6-30dd-46c3-b8d6-034f6e28e232",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "c29e00f2-a7fa-415a-8d4d-1f5fbd1b7758",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "bb3264b4-30ae-44ec-b45f-14a8df4b334e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "d8da0a0c-dbeb-46fc-99e4-5aac05a8af66"
		},
		{
			"name": "Setup Copy",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9d4d90bc-c7ed-4cac-a8e0-74ff399a86b7",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ea339ae0-6094-470a-991b-8d7aa037501a",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a202cfce-a0aa-4e49-9d85-120de417492a",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7063f334-3ef6-4505-8113-9377147c7672",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "49afdb45-968c-4569-89e1-d4db6bc10c61",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c6a1c007-102b-43d3-8b84-5d3c9cc7ddb4",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "228b0d41-511c-4ae9-b6e4-50015925f0d2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "97d840eb-da9b-46e5-928c-a5d968085590",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1e026e3a-c7fd-426b-9788-12e70efc7a6f",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f7c047c1-25bb-41d1-bdf9-5772e08d3984",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "95206469-a9ef-4119-b354-c23ef6a99de0",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "e2323d76-0ec1-4296-b3ee-dbdcd4166e13",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "120cdb44-31e8-4ef0-afc4-52f915cd3204",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "836fdf96-9ae6-4694-ace0-8b88b2b0aa1d",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "364d3033-df4b-484d-ac53-745b99c597b2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a7b58be8-6535-428b-8122-7b782c31ea45",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d4a0e533-375c-48ad-8f1a-5230b0bcbf3d",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2e90ca9f-278b-4527-ae9e-81ca6715db93",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "54359b41-9039-4a25-b3d3-382fe0c6aa69",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "7f35b94d-b16b-4fd7-95bc-f2821353a636",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "8da58a39-fa1d-4546-9235-5aad9a15a3cc",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ec307b6d-2298-4754-bd39-9f7aaa8dcadc",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "5f1cf15c-54ce-4499-96e3-eff643ca4c41"
		},
		{
			"name": "Setup Copy 2",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ad51c5d2-5b69-4812-a343-629dcb1cafab",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "589ef4cd-eaf1-4773-b8b6-958897c18e21",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "99aeac1c-4ac6-4cd0-a369-51b1aad8283c",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a755d435-37e2-462a-92ec-ef6dac82e55c",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "db141dfe-c1dc-4382-93e0-49c2d95eb821",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ae30c918-0498-4b6f-b81f-8056495696b4",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8a0f07ba-e813-4b1c-8859-936c123c0dbf",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f514df4d-a15a-4a58-992a-0d75403598ba",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2b8fa406-8ecd-483f-8179-b7100014a4c4",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "790053c3-3014-4613-9838-70113d028abb",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "08bb0f61-5495-4ce5-a396-04cad613f392",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "df10f736-d085-4e13-90e9-182d8421b51c",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "0c35306d-7ec2-453e-b250-247c9572c158",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "698ff0b9-226a-4216-a73d-2216e5df4fe4",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9d309b97-e0df-47d6-8d09-f2716e965713",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "64d70fcc-42c4-4642-81b3-f4d3a13fc6e7",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "09c0de29-c7c4-4f2b-885a-7bd373cfe80d",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "794aedd2-98ec-46cd-8d15-f270055b6b8b",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "4c783160-a18d-44c6-9200-9e1342458228",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "80b3049e-422f-4819-bfe4-9faca55979e9",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "d0d69081-46b3-4555-a456-793e8f154f3c",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ca3a764c-b0ad-47c9-8513-287a5a109bab",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "ba4fc28f-65a0-4e51-9c94-4d08ce5c0efc"
		},
		{
			"name": "Setup Copy 3",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e43f27b4-4472-4e18-8d3b-f276fac053d9",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5357b6d1-a069-448f-93b9-26bc007d1284",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0fd6e1ca-ab94-414b-a3b6-235af21cf097",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9294c35e-30ce-40b0-a2e4-76fd18d1fbd6",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5d5c4344-3262-4bc5-9c16-f538c5efba46",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "62a1ac41-a636-404d-b25a-20bb1920d810",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "506942e1-d649-47bb-bc23-453abdbaa2c2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f6a5951e-7a92-447b-9b42-1de2c098d07a",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "efc2e6b7-0fe1-41c9-b64b-6425f35cfac4",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c01a9c53-199f-4c61-8b94-0de821efb17d",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "356ce0bb-52e6-4ecf-9339-6ae8fa35a6ae",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "1264c41e-bfd0-4726-891a-e14298505da2",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "900dd3d3-1578-4822-ac69-91bb47d6cc03",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "32d217b6-704f-428c-9573-07537e3c549f",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c3de212e-9250-45d4-ba27-edd9bddad63f",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b5aa9000-b6df-44d9-80c3-e05d11fdf192",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "bb74379f-d80e-4533-a008-f03862823e0f",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5cb5d543-5940-4a52-a506-e7f1ef37e795",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "b5510482-66c7-495d-9fee-45bd8cc1ef2f",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "c280a681-bacf-45fd-b6b4-557d50105c14",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "3458706c-a397-42dd-8305-4d8826d49c7a",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ba61c7ba-8369-4300-876d-6072c43e018e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "a32679b1-ff71-4c20-9858-20c76854f1f1"
		},
		{
			"name": "Setup Copy 4",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b8218a24-894b-4803-a3a3-1353983cee7e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f6c3ba84-4866-4b05-aa3a-79e1dc5bca18",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a73d0330-99fe-470a-a148-e0b0bd528c7c",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e9326a0f-a746-424e-96e9-72ae01cb3bf5",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "10e3a693-85ae-41a4-93ee-ceacfac39922",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ae091e2c-fde2-4135-86bf-01342ba14b72",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9fcc36c6-4900-4e35-a779-8e25d13ada59",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f10719ad-1b72-4a2a-a434-b8841539da11",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "418c6744-9037-45f2-b1ec-a6900d6cbbca",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2c1062a0-cd02-4ce8-b5b4-73a2a18a4cd3",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "63178fcb-4530-467a-b5e6-4f7f3ad1f237",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "0d191382-a6de-4834-ba2f-340e5aef1de6",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "0d580e08-55ea-484e-b65e-81f9a674b144",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "045e5895-28f4-497b-b8cf-e7fd5d7f7f11",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b01851bb-a04d-465a-bb69-8a8cdec05475",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "512809c7-010a-47a6-88b4-85f6621caf5c",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6c6348e0-c453-40eb-9511-b3e42b9631ea",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7cd65537-c551-4644-9dbb-b95cbed0f278",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "a72880bb-a831-4912-a7fe-332519593e36",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "7680f8f6-6dd9-4c50-9a53-7beb98c864b1",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "9573be41-01bf-4937-8aed-2ccbd8da740c",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "414ee8d8-27c9-4f00-abf7-5f398a2add90",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "d0c5bcb2-7ff2-414d-a184-cb4477f6742a"
		},
		{
			"name": "Setup Copy 5",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3c4e226d-6a78-4c5b-8915-526102ce7673",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e0ab0338-cc58-460d-8060-4aaec76324f3",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "11aa2d7a-9a33-49be-bf5d-f3ebbc9baaee",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4612999d-84b1-401b-a5e1-58057bb73713",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0038db23-2d4f-4bed-9c33-b375fb09370b",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "bdc2a9d0-3659-468a-9f1b-5da3223dfd4f",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fdf4812c-a306-48f6-b8b6-758f269d7edd",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8b157719-6d98-4bb6-8488-ad7af54e9808",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "71e68a19-184b-40f5-a82d-fd50c7e9e82c",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "06fb8544-a4e4-4a92-92ab-7d48d3409b29",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8b59d00f-75b0-481f-a52a-2d97fd78c273",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "2fc44e41-0412-48f1-9e96-d4dac967493e",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "d452cdd2-cd2a-4f1d-b4c3-059f8bc084a6",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "ece6e0fc-a665-4669-999d-bb5d049109b5",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8df66ba1-6793-4941-b252-d34510a4afb6",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "79a409ed-93f8-4d2c-aad8-973e390d1b40",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0a33c13e-5387-485d-939d-aa2fd00ab381",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4274ca29-7784-46c6-972a-d8cff90efb2e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "59c8c614-f457-458b-b0b2-c86ce5990d55",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "6928979a-177e-448c-9518-293e8de971fe",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "27dc40f2-25b6-4646-a180-de236c32a5dd",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a70c54f2-a537-4c3b-a588-5187b71c745d",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "6014af31-3b73-461b-bb2f-5d010cfd41a3"
		},
		{
			"name": "Setup Copy 6",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c75e8f11-5c4a-48c7-9f37-6b54a89173e9",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7ee35aeb-8147-44a1-8aa8-9f834c6c2176",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "113ee2b0-d71b-42b7-9763-54bf5c6bc3e0",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4d846673-821c-4677-bd52-7397851f5591",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7f33d713-9202-4e96-abc6-968c7e4b42a6",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "adaced93-901b-447f-bfbd-8b08c0adb9da",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "93510c76-f04b-4f06-a08a-37a84a8faac2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "78d3c42e-3f33-4a56-9a12-d073a2084122",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e648c54c-74a3-40a0-91f7-18e8c689d8b1",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1467e706-8a7d-476b-9c55-778adb9c0d27",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c87fb893-585d-4fae-b717-9bf915257349",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "cc9e26d6-caab-4f6b-8614-7933f9c6f200",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "6d16f1d4-ea24-427e-88b7-b45bc873f7ba",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "9c1cd5b7-716d-4392-83dd-d587a3c741d3",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "837e72f8-5b5d-414c-8e59-7f9390973287",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "43a64e7f-0d16-4c22-b2da-0c25ed543f20",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "44719cbb-337e-4c43-8286-1aceeb97c124",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "357c4aaf-d7db-4a50-adc5-1217aa75315e",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "47a691d0-ff47-49d1-b473-1d2b2e0053f7",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "82b932a5-d0b1-4cf3-af10-c4eead81aebf",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "043eb7b9-ccb9-4d5d-9fc2-885605b061b3",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "43fdd33e-15d6-4e37-b775-5bb139a5e089",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "befd4693-93fc-4de2-8b50-07a5a3a72a34"
		},
		{
			"name": "Setup Copy 7",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3d87f09b-20c1-4a0b-a826-19280b9bbf37",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3af096a7-1e06-456f-8fae-ea69a4e844ea",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6c8e9d7a-7d53-4fae-9bf1-764febaf8c76",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3e1b619b-c2d1-4357-ba88-fb892abcf2f1",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c47573bc-d5e2-42df-be06-2de800ad5d5f",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "11772b36-94c6-410b-b074-29a3c789c5b9",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "97935f97-b212-4bda-86c0-4486391c6717",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "70b61c53-2dcc-4957-824d-9af34e0748c9",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "10570d74-aed9-4e30-91cb-aa9a53e5b46b",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5cd4db3e-23fe-4c41-acaf-79a5e7f86e15",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "55dbbf9c-b948-475b-a24c-67c2d9421803",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "6e313e0c-8106-4c9d-85bd-1bbea6236e77",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "f30202a2-0aa2-48f5-956b-b7802347e827",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "d6949b7b-d1be-4080-93a4-a697773efba5",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e2b9d24d-895b-4c56-b9c2-b511bff9adfc",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "456340ca-06a5-421d-a3a0-81bbefee7792",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "802af0a9-ca04-445a-96cb-794b5a0648c9",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5345308c-2f6d-40c0-961c-f88c04734bed",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "0943c105-1ea1-46ff-9601-31111a6e742f",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "98fa3654-bf99-4b7d-8a17-1c011360ecf6",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "84ae1c9d-6c49-4eac-bc8e-b3b3747e90c3",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "313a2eb7-d0f5-4170-bb47-d413eed78550",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "900aa9d3-9dc3-4d04-a3f6-ae1b7af58bcb"
		},
		{
			"name": "Setup Copy 8",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8086c1c1-5724-48cb-890d-8c0c61e6edb1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "58a705e0-7bd2-446b-aeb4-8a4fd0b7da77",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9559c90d-92cb-46ef-89cf-ea34ec916783",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b156cbe3-8d34-46ba-886b-002b696e1f43",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1b84c170-f54e-4187-b045-f9112bc46afa",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9b01f51a-87a7-4034-a550-c7c14cbe81c8",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "973e56e4-4be7-4346-952f-e5376010255f",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e91f0211-beea-47aa-a7f5-8d184202d641",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "98ae614b-8cd5-4e07-ade7-d6f54028201c",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "109450e7-43a6-4be8-b7c6-8e3975324627",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "603c7509-9db1-413a-a85c-9a1126d14c3c",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "8d1198ef-d1ef-4c8a-be57-ec1cdc1196a2",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "3491ef60-de93-41d7-9356-34c24762f663",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "1f5350fc-caa0-48be-b5f5-32b2f5e745be",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f1fbc782-5d28-4651-8a44-bcc716690896",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fe3e3ff3-a860-4138-b699-12e51724a9f7",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6d97594d-fa41-4eed-835b-99f88c6e2c43",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4e8ad054-72f9-48f4-990f-122092d9c875",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "4df39d8e-5761-48f3-93bd-122ebdef5686",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "7d1d62e2-02d9-4ab0-9240-01be089b2a2d",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "407f2d5f-b9e1-40a0-a44b-aba58133ac8d",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "287f7d08-1bc6-4f09-8d58-82e91a383938",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "f1aa2b42-df88-4ac9-83eb-c0a3a6e3ac62"
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4611f251-b287-477c-8369-41544d490b79",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6f7af0b4-67c3-4fc1-ad49-2cce81edd075",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3d002b6e-e074-4784-9938-9b76bb632ee8",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "1ab8d321-5460-43e8-8fcb-5c56c14217b4"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2a94f562-ce4a-4902-bfea-524d9b912122",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7f8feb74-7ff6-4cd4-9793-8cac9571bc52",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4bb02aac-af7c-404f-80e4-92fca00d91a6",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "29d44335-3451-43c5-ae58-151a6d7c7fcc",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "43eb511d-adab-4e6c-84b2-6e29c72bdb83",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3a9081eb-c980-4034-aab4-e72f23905a59",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "c63a7095-bdcb-48a2-b7f9-8ba3a9b67ab0"
						}
					],
					"id": "6b361279-514a-4f98-ad57-c404a46ca247",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2cf8fe2a-ae81-430a-be3a-4e0daeadd2f8",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ed2874ad-f009-49c5-9f1e-2253e0a32671",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d696a4ae-765b-44d1-872b-ba931c121f16",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "d861369d-6a8b-4861-bf2d-a04ca29466d6"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7cbe65ff-df7b-4d8b-bd59-08994cf87843",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0909b0d3-af3a-4c9f-a9dc-b5c3809859c9",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "83303654-6858-4842-b915-9ee4123d563b",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "c592a39a-25d7-4de5-91cc-b499701a5d1f"
						}
					],
					"id": "55334b9b-f043-4443-ab14-283458b222ab"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "882fc6e0-c05d-4973-aca4-7c3b5e898e0d",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "d68fbcb7-37bd-40c0-8d3a-19b77acb311b"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "162a61a1-36a3-4fd0-a1bb-f9db383fbcc4",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "14af55df-7497-4dd8-8ced-28a1b91d82ed",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "5a38d4d6-8903-49d0-bc6d-8eb1521e3053",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "0f24ff68-ef00-4419-a287-5a4dce35f101"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "f42dc343-b0e4-4088-85e8-854dbcc6397a",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "76a2ffd6-820a-4a5d-b7e3-276bbb4b1e9b",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "190d462f-3d50-4b03-8be8-6f844a597af6",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "a6050de2-0299-492e-a782-a6164b65a562",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "3aa2e2ba-105b-4848-991e-e28e3ce52249",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "eafc3513-55ab-4b67-9eaf-5fe26d472ef4",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "a2378692-4f55-44b4-9383-0fccc0da1af7"
								}
							],
							"id": "6bcd12dd-69ba-4681-b5a9-ddc1424ef149",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "dfd6cad2-8400-47cc-bdd8-74ce075a1d58",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "ff747679-108b-42a2-81a4-2b76dbe89a61",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "ab281afb-e655-4001-83d4-bbe05a909392",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "aa86aa95-cd1e-43fa-9431-f1bdeb0e791c",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "b54485ee-94c9-49ff-9594-c30eb2fca2b4",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "a0e4c52f-1796-4c5d-b52a-b459956d2571"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "b4a53a12-7512-46b3-a93a-a0e441e64bae",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "dca5c20c-5285-4e70-98b6-8f90d9658789",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "1d1e8a69-6ac8-4713-b6af-04e1cc294528",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "0e74e973-2c8b-4ea5-82ca-b0e50f4422dd",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "65198653-c062-4367-a346-215c23eaa034",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "72ff2add-eb6f-4c0d-b3e9-dc5730ce09aa",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "2b6d9b26-a23c-4f49-af7c-f9696674f03e"
								}
							],
							"id": "9b1a6aef-d969-4ca1-b353-4d8811d1d91c",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"id": "3c96f07b-5dd3-4550-bf5f-74d41ae7c8e6",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "67282db1-ec59-48fc-a142-dc3a63499ea6",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "28b8b8a5-cb83-40d4-a5f3-e68ac71b15b3"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f636aa4b-7f44-467c-8eba-532e5a2fc50d",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e707aabc-20f7-459f-9b5c-bee5dc3deca2",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "6094c79a-8fc0-46cd-a701-024abc7c9a15",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "1fcc7116-5479-42cc-b67d-8951eae8fe03",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "78cbf19d-4abf-47f8-895e-d4298c81bd75",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "c2439f35-58a7-49b3-bac1-b9c5c3c02759",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3c19868f-00db-4d4b-83d9-5b7ad7b67e16",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "7fa5028d-a314-40b8-9d06-65369c0dfc8a",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "35e633c4-60cb-48be-a189-8eade51c0839",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "e0ffbb72-b641-400b-a1f0-20ab59434ac3",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "7b32fc3a-957b-4c38-aebf-1086b67045b4",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7db90b07-2353-45db-b4b5-66b9267fa1cd",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1c6a90f9-cd34-49a8-9693-33ea2ee68340",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "c4a27880-ea96-453d-b4f3-fd33590cef2c",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "cbd4b340-823f-4906-b30f-8fac39b06783",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "13206fa8-42d2-4d85-ace0-de86457cd9aa",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "93ae0213-9058-47a8-bb3a-4952384cb0b6",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d59b8320-1fe9-419b-b81d-8d1db29abf99",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "0b9d7926-e47a-4d81-923f-8f465fc402fe"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "184757be-d12b-4669-a7b3-529c4d77dfd6",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "3cc4ffb5-4898-4b00-90c0-e5f45871efb5",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "15645266-c0fe-4011-aa2a-54cb53b89fc5",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5104d8d1-668c-4054-881c-61b90549e3b2",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "6170e240-d16b-4465-b861-d68de9c438a9",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "40d6fc1a-ec27-450b-840f-d84f45c1eb9b",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "482570b0-b1b7-4d75-80da-c68ba825e808",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "383fcf28-74db-4d3b-89ca-5668f8b4a98e",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "012b9967-4338-4c2c-8dbd-f9c4a9584123",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "9543ba17-5bea-4b2e-b7b5-fc6b89f5d38f",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "57eb0eb4-ef1b-4849-9c62-a96dc3f49c16",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "fe8d3d34-2f1d-43f0-875f-1ca88e0fb896",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "f119318c-a54e-4aea-a70d-41d93bc99a50",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "eba45dcd-f356-4eb7-87d5-3e24cd96869b",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "a7a5a8f1-69ca-49ed-b72f-d82c5c450af4",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "49fc189d-461f-42fe-8e06-8837bc361adb",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "c27ecd38-56b6-4f6b-a324-340beecd5a84",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ddbbe1db-2168-43b6-a0b4-22caa50c429c",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "a9d4d4ec-c343-445d-80f5-a33be05be321",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "ba26ca32-8c05-44e4-9baf-ddb0da90c5d5",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "8e62ed73-7340-44b2-8f92-fab5d3c8a562",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "c64fc166-8b2d-4c23-8459-8a53a372cfd9",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f0cd3dae-62d4-4dd7-92c9-ad4c1cb7ae2a",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "24f2851d-8518-4766-8811-c503f890752e",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "d7ba2a4c-9e3c-4727-9c2f-642ec28d2da3",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "7938467b-90e6-4f9e-b70a-7c866689326a",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "47efc78f-6147-477b-bd8a-fe30d2d49b26",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "0f7e86fb-a122-4dce-814f-2f4800bb7c97",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "e0f0a4ef-7381-4ea3-be02-0f6fe2fcb6ac",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "ea8c06dd-2e53-4a03-9ba4-e88378848253",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "16aa95c6-10ba-4044-b8ca-bfcae952cab5",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3ec2dc40-dd8d-49d4-9500-f9d40f6a1bf4",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "f2eccdcf-6c68-45e6-b363-8034585791ae",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "d0a980f3-ad0b-4486-a26a-f7f166bf858f",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "98cdf962-4494-47d3-aeb6-54259a9490ff",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "514db340-6d2b-4f6f-a200-bcc4a43f43ae",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "20ced606-bcb3-400b-956a-2002352f21db",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "40e8211c-7f39-4a6a-8866-210a839a5548",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "75cb26cf-af8e-43c6-af7e-cf368e6947fe",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "b4d3a21f-c0cb-4628-a7ff-d34b96f7544f",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a1140d84-6f85-4137-885d-592a23c57f2c",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "58e6edc2-ad7a-465c-8ad4-079066d73537",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "21482a02-ecc4-4014-8a9a-3813dac7cd42",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "562e0202-71a6-48f9-966a-b0283bb8f4c1",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "4c31da3d-ae3c-4410-8a80-e39f5a49cd5b",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b30491b4-7c8b-4e58-b6e5-798dd36df445",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "342a55c9-7fa2-4972-a549-ffc65bd98200",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "f3b7b5cf-e127-461f-84ae-6305d24d861b",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "4f5dfa87-f8c5-47d4-8a91-5c1c936b4bdf",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "32b4b909-72c0-4535-910d-536078e671dc",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "7ff8e2ca-3012-4737-b29d-aa59cffab85c",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "9489cbfd-45cd-4a86-911b-9d31715b093b",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "60c0a260-6c6c-41df-85af-02418b082a67",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "fcb9b041-8f8a-4055-9782-a64b1d682267",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "58bd4503-13a9-4662-bec0-7570bed52959"
						}
					],
					"id": "66e89c69-7f17-4b21-9ab4-10f3bf9173e8",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4e47548c-5675-470d-9f72-5132e3a0d678",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "3d21611c-9b28-4805-a19e-9fecc133643c",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "b59ea67a-6178-4187-9a43-530d1ccf9e6c",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "b4a1a4a7-7732-47cf-8f62-06f068b615c1",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3244b534-48a7-453d-be22-dd055c97a148",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ce12bb3a-1f98-4048-819a-1ff2f9ccb699",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "cb395ae4-3d84-4878-9bba-e38db6b1108b",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "78579038-2677-4f04-9f3e-0a26ba52db37",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "5c547af7-8a73-4c9b-98d8-6cc4c3e1af01"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fd47173d-518d-407a-8553-ca7747e11c23",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c942ef4d-88a0-4e0b-817e-ab72c77c6efc",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "9a1125be-8172-4a02-981a-193e4c4ff351",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "17dd980b-6d28-4996-b7d9-87505ddf0cfb",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "6dd80a7b-6470-43bb-bee1-709b31ed9f8e",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fcc94f31-5d82-4c90-9f90-b1b42fa0d1ef",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "e9e6b6c2-97e1-4e3d-b3b5-409ac97182b2",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "af3dcdc2-6566-48cd-ac9a-e9bef51ebe13"
				}
			],
			"id": "b5372838-a87b-46fe-b05a-d7774bbeb9ab"
		},
		{
			"name": "Tests Copy",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6e4580ef-f9fa-4a4f-a21f-5906c5acae7c",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8355d4ad-a65e-4859-b9b6-fcfe09babbf4",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "252b1012-6584-4dbb-b0ac-0862a4f0b200",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "ee149044-bd0a-4d0f-be02-9f704c88118a"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "460a25f6-fe2e-4fe2-8d50-1ceeedccbff6",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "96d62123-6f7f-4ea5-8dea-a5a062f6c604",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a48e05df-566f-4042-bd57-c162ab86aff2",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "40917a4e-c0d2-4ac6-85da-ed86ad227fc1",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4e6ecb3f-d941-4144-be44-d467685dfaad",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "eef505b0-fc18-40b3-a89a-69ce1ef722b6",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "d7084010-bddf-4edd-ad38-66d4f5366516"
						}
					],
					"id": "91cedc5a-e501-404f-8f10-4a87ec60c6dc",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "96bf8a04-2efe-475a-ba32-268414e26879",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b4db635e-e999-4757-abfa-d1870c701d67",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8dee32d4-5ec3-4d74-8609-01247ba35ea1",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "b7fb056d-81c9-4a7a-ac3a-f46d9327bd11"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "da5f28b2-d586-47f7-8a20-d789e6f2cfcf",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9c297d03-03ac-4a2f-8a70-314fe26fffad",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2227b363-0f3e-4193-a7a1-e338c163c5bc",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "f5bda7a6-7452-4f66-a684-d9721a03ca34"
						}
					],
					"id": "99a3b4b1-4371-435a-a4d7-0c2a498a3e47"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "5637f491-8066-4b63-af8d-66874bd3df51",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "7146120a-043a-459f-be05-42142d7f5c9e"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "5647a636-b932-4e51-b49e-42c5dcad13f2",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "60281548-3d3d-45fe-8b6f-23aec09cf82f",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "e973a83b-8e1f-4d07-ab38-3902b7b6f456",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "b98cac2e-a4e1-485c-a255-050cf2789a5c"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "3bd9d319-03e3-4780-ae5d-d3eb804635a4",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "48978ce2-67ab-4ac3-b841-cebf0be6748d",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "89b0427c-6bf3-4857-9093-a266deaed8a0",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "1761d50e-25a6-4756-8f7b-e64c178f545c",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "8ea47cc1-ac88-46db-804c-a5546b59d682",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "715209d1-0063-4d4f-a00d-e34490b55799",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "14aaf73e-47f6-494a-aeb9-6bed57cb94ce"
								}
							],
							"id": "3fca509d-7b95-4e33-b1a0-bdd85e44c75d",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "2622cdf2-4ab7-4a25-9850-118e97bb030e",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "7d31fb37-51a9-4aaf-8967-3d13bf3d1ea2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "7a494e20-3739-4f5b-baf6-3c280692e309",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "c3a00025-38f4-4135-8a8a-27fe56e716c7",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "72f2591f-7218-4eea-9398-be184acd158e",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "f3011e2d-2722-47b7-99fd-8f258c6c1235"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "da516009-ebf7-4d53-aa17-f4203922d215",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "476f5a90-5be5-4af7-9afd-8ec49f477dfa",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "26cb3032-55c8-4bb6-b9c6-30eb9ee55acb",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "2309e851-bc26-4c4b-81c1-d6f1a648ca17",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "c7ffdd1f-3c85-44a9-bac9-8bbadc7889fa",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "aa61e275-94bc-4667-b56b-8c2ffd9e3163",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "10acb071-b889-47b5-a45e-f8364e22f5cf"
								}
							],
							"id": "cb1ac7f6-a7e7-4964-80ab-e3e68f5cc1e9",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"id": "1e82538a-2cc6-4ae5-862f-6b7c6a631f22",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "d26a87d9-c5f0-4ecc-8e76-a950939e82e5",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "217ffd16-b345-4bc4-8cbe-9e7e839df9bf"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7b5633e3-051d-42a7-921d-661bb83d4b5e",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e768d759-df11-4618-a19b-2e0fc229a475",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "3eab235f-7bc0-439e-8089-49189cec2679",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "5f298ce5-864e-4d84-bccb-f210040c688c",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "d2427705-fadf-47f9-8c41-45ee1e637afd",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "d06877d1-4124-4b9d-9432-fdf8d25a7ef9",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5fc0d5a0-e904-4de9-a41b-bb0a45ab1780",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "999e9c3d-80ea-41c5-975d-26e6c0c5c847",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "21d6e2d9-8194-4df2-b01b-cbb0623065b8",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "67c15e1f-34b7-4d6d-ad6a-f866b4c7fab7",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "5f756900-12fe-44a3-85ea-2070861117fa",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1396fb89-445e-432f-a918-86821a9d9fae",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2c5f270e-7e5a-4a62-864f-a805b9cfb1d8",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "5bbd61cc-fbfe-4eb6-8194-ddeec8671fa6",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "c46ec863-7751-4871-872e-64cfc3342710",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "ce70dc69-5577-4b26-8319-7ec6f4e2655e",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "414b141b-ef8f-4e0e-8874-0de862913410",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "364e9201-a904-45bd-8b75-cc3399422bd3",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "35978d1b-571e-4e62-931a-79c445798847"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b74deefd-8887-4b42-a6cd-65d4e6c689bc",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "b294f6b2-4522-4c90-9e37-ed895b031f71",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "ee7de4c1-1e51-45d9-ab21-e6a64c7ce93e",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f3e890ee-589a-4189-88ec-9090520b65a7",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "7551455e-4d28-4313-b182-b80e93ee3525",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "a2bb2376-d33a-40e5-a365-cc607d35d7be",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "9095a418-06f1-4b71-a6ba-0cd408158cb0",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "5be5d127-2fa7-44c1-a9dd-d3ab54de05be",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ce839fe9-9167-4138-8708-8e74aea1d861",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "8a2b36c7-2288-49f6-be7e-1867bc40c6e9",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "09a34cfd-2693-4ec6-bff0-f5b56a8bc784",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "3aa892d0-e271-4734-9e79-5fcd1a15ee17",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "2b5bf0c7-6116-449f-9896-e091a24f3c8e",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d8034cd5-6f24-4102-997d-7f4b86e712c5",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "83f3980f-b38c-4d53-9ac3-4d9956ab6b9b",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "46c5345b-455a-48b3-a221-3baff185eb05",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "8abda0ed-ea30-4f71-83d1-ae9b5b0bd07a",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "fa103626-ed66-40a5-8b1b-a5c71b98e734",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "f3027d62-e5ca-462b-9222-0969850003a0",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "9cd57c2a-eaed-4699-9b12-abac3748ceed",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "4963d1c4-ca5e-4416-b97f-cfe7f27b8151",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "8124c633-7839-4d42-9768-cce62283c471",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "69e8696c-978d-4c31-998f-fb7736ee78f1",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "390d0b18-58a3-43b6-9ff9-7797e85a58b3",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "bba0a57e-4def-4e59-95c1-b962e224c656",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "87116d89-dc76-49bb-a15c-750cb1a13a30",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "34c59d4b-a181-4c73-9b6f-24196fcf74f2",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "1392d5bd-a299-44e4-9b32-548234dd50cb",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "1a8901fb-f3fe-4fed-a8b4-2f464452c5f1",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "993067bf-9701-4bbb-bb09-172fbf39c5af",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "e11ebbce-2ad0-4481-bf59-0ab03d78ab4c",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f37fbbc6-e925-4412-ab58-c6477cd2032c",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "8ee61757-ecb3-4535-a10c-3d6ef8dfaa5c",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "63cfdba1-6683-4b80-8284-015f8f2891f3",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "5f0d464a-9fd5-434e-8553-acc96c240840",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "b4cca27c-6f06-4260-8d2d-125d74993d8f",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9df27d84-e69a-419a-9066-f1e19738bc0c",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "f6eb0e0f-0f8c-4f20-badf-91b2bf20afe0",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "ee4f7b50-226e-41a7-958d-255cf5828836",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "986226ee-7455-4720-834b-5d28fe8fef15",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "069991cd-c56b-4006-a64e-ece1106db5b4",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "e51a945e-4361-4dab-9afe-1d87a9c978e0",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "79fed997-c467-445b-89b7-4b1382b51f9e",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "1cf2f1f8-2709-4b77-ac03-705f7b8b00d8",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "188a0e2d-6187-4115-b0f9-e6543d899c29",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "eaf2798c-d98c-47e0-94a9-baa340cdf647",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "bab05158-190e-4b23-92e3-fe4907299f5d",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "88dc3e49-0552-4e24-bad1-cb8228235c3f",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "c5396a6c-7b67-4acf-bc83-f9bbb0a9fa1c",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c8a6f8f5-4f6d-4a06-bdb5-443f86cfcecb",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "6e7a4dc1-fc76-473b-8d10-205b65ac81b9",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "fcbfe65f-ac40-4116-bbdd-e043000c71ae",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "34772f37-ee9f-45af-bfe3-b6b443d5855b",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4e736f77-f81a-409d-a7fa-6b79914ea115",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "bc61ec7f-cae5-4af7-91cc-1c4d9c3a3ff2"
						}
					],
					"id": "077d2066-4893-4238-90d2-74ace6f51515",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0dc043ee-1873-43a8-9560-e23d67540e40",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "58bad8b3-5669-44a7-9932-c5209e3ec0d1",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "4606e2cd-4f58-449f-a05b-05f284134083",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "2599127c-ea41-4941-afdd-b3d7808f1e5e",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "39ec7adb-491d-4bca-942f-92a8d866f2f9",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "607e5c6e-c6b7-41bd-adb0-d9efc0f78bc0",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b1c60c75-6723-4e18-92a2-da847b1899e1",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "9dcb94a6-e672-4cea-8c3c-feb79572f901",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "5e2362f0-1ba7-471a-9568-ecbc03f4fa50"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "aadf3f80-1150-46c2-b529-68f17eda94e1",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c09d7390-b7bb-49f0-a5fb-512feb65621a",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "dc76fceb-a0c2-4c58-a0c8-4f91b7051267",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "325a78fb-9518-4bf0-90f2-f92747337384",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "21d7ef3a-1ae5-413c-a6b8-d47e72d34358",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a5c67ad5-e30b-4f7a-b62c-629e45b18c68",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "b5dfc34f-6f6b-4fb5-bb77-1e4ca2a1b09e",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "7430dd30-446a-4135-9474-9c1cf723483f"
				}
			],
			"id": "ff88f2c0-8efa-4c64-ac7f-a53642114abc"
		},
		{
			"name": "Tests Copy 2",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d4114dce-9176-4494-bb78-b7c0357df4ac",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3d9a547c-82ad-4230-a2fc-3761f6926ae0",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "259ed456-c596-4a02-b275-3fb9b5ea1b20",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "1789d0ba-6bb6-4435-a211-66acb814fd9b"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f23995c2-c36c-4db2-a644-38d99e8d95dc",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "42635b2f-a948-49aa-bf57-5d9a91101c3a",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d48290f1-7e2c-4158-a78e-d37961119bc7",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7eeacdb4-ef6e-4288-9950-6ee7d219cc38",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b6bc8322-cc45-444c-b730-ad1cb8de1ab1",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e18ad8d3-abfb-491e-a866-1c9e42912d1a",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "976b2642-df73-4511-99bd-598b0493d102"
						}
					],
					"id": "bdd9a9b8-9219-46a5-b070-0809ca350201",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "aa67efbe-bc04-4fd9-88cb-c58d7d7f33f1",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e5ec0ffe-19e0-4056-9bd8-d7dd3a0184d3",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c8f2ce41-4f74-480b-a793-53427cc57ca4",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "5b61a4ae-c51b-47e4-953c-6c2e175828dd"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "72488b88-8111-4765-9c84-fad7f51415b7",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "69e886c9-6088-4c3e-8570-93ef32f25549",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a0418ba3-466a-45d4-85c7-d0f8a2a1a8a8",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "bf732ede-4720-42a7-a8f7-14f67df032f5"
						}
					],
					"id": "767fa8ad-45fe-4fee-8899-7dd49df722b6"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "de42e3c0-cf6e-4746-9411-2d3668380203",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "20f44640-1b52-4837-ba7f-1b7a06a07486"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "db132731-1ece-4d23-b4e2-c08f456d3cfd",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "f842d4d3-047a-4169-b82d-548ff93dd4af",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "63f9e0db-dd2b-4cd6-a1d4-708275a8a6f6",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "02b9996c-b7b8-44d7-8d05-08898a0e3a88"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "e3e3b05d-1ca6-43f2-976b-4064b121576a",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "ec8fa9c6-fc2f-41e6-b859-385a24580046",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "534a22d3-cc48-42e2-b068-eb30dc658725",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "f0d1cc51-9a7d-4470-b760-d9606ed6eb0f",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "5b076c21-1df0-423f-9270-778f31338169",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "fded29fd-506d-4d8b-a230-1e522a9d1458",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "300eb325-786f-42a8-80d4-5049a0cefb14"
								}
							],
							"id": "094cda74-e084-45a8-a791-7ed40e040755",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "5e6e75c8-d4df-400c-821a-2e15f5cc4713",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "62a12fa4-0bf9-4b30-b3dc-76b42ce7b54c",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "621e68a1-e264-4f20-9a58-9784c562c628",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "ce9e234a-9965-40c0-81dd-6b900dab4f23",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "5f9854de-e8bc-4905-b031-6e7b30385bcb",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "317d2f55-026a-4284-a77d-11177c6747f0"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "3bce598d-ccef-4939-af66-c2684b782258",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "6e1a88e1-428c-4aba-9536-4df08fb3d42f",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "31bcb7ea-8731-481e-aa4d-d27f714ca536",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "f03af2fb-9cb9-4740-9c42-2da7731e2a8f",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "71b3336b-8ccc-4f04-8338-bb5b28d0562f",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "487eaca2-7676-46cf-8220-7c3374a9b6c0",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "030bc635-c53b-4f53-a714-243ce1247bcb"
								}
							],
							"id": "9198d8b1-a22c-4c8e-b4d7-2a7267f221e1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"id": "e7f32485-0b7f-4fa2-9a68-2676f173683d",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "cc7f8888-c2df-4eb7-aef7-792d09566a9d",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "786ce1ae-59a5-4db6-b704-353d9046196d"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6840e29a-ae2f-45f9-8ecc-a85c30a99a59",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2eb160ad-eff0-46d6-b39c-dfe33f76fe17",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "726477e7-ba77-497e-bc60-1a84936b9ee4",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "764eaf5a-4810-48dc-8410-87fd9b733a2d",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "b37f1872-da0e-45ff-8ba8-42241fa4e4ae",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "dcca6008-7134-4c66-8e98-28c5449d7675",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e9818d43-f765-41b7-ab94-62de62e08897",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "2cfebe5e-5718-4a51-85e3-4e281e9aa7d5",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "66b33c75-55cb-43da-a172-881e86071b42",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "84fe8a80-9047-4a07-b5a3-9be9de1cf55e",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "ab17ae73-2d50-4883-9a19-b246a91df590",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "870b2af9-e93d-40be-b5a7-b2da956f3073",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "bbe3d96e-8c98-4661-a617-f89e2ea2315c",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "0c6b2275-5c5d-4627-b4c5-ba4c261084e9",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "21644c43-3c44-42c2-9af6-c24f676b594b",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "1abfa4dc-fd27-4441-a0e6-eca91a92c705",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "3bb10235-adf6-45c6-9bd6-a52053b1e47c",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2d4e8cf7-92b1-4ed5-aaf8-2dabbf33453f",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "73448e81-31ef-4926-9f92-e8ec46814f8b"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2bc01b1c-4a56-4387-9d85-919f66d9d765",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "07eee2f2-e14b-4c19-aed0-d275a5701b1a",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "6c24f0c8-b079-4aee-9565-7a5ac68a8a17",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "05cc1e8a-d754-455f-8074-f91536eb9ff6",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "9813dcc1-160c-40bd-8db5-80b770ca6cee",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "959268a6-54c4-458d-8a7f-1eb2ae586aad",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "a14c07f1-0f07-44ae-9709-7cbbffdc992a",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "f6ca7e24-742f-4ab3-b1da-022c28914624",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b9e4fcc7-91c0-49f4-bbaa-c77b2ac73315",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "374da3a7-f18c-4e71-8420-774a570efe70",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "0f13a0d4-1d40-4ab1-81cd-8c4cc9dede33",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "ddeac70c-aef3-4de3-a071-7badd919b0c5",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "6a860bc5-3b8d-4b7a-9cbe-17fd1ee935fc",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "18718e94-49bf-4bf4-8de2-fc7957cd1d7b",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "f08f2d4a-fe1d-4bcc-9972-a02bb4faef76",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "d9d55300-db14-4313-a699-e8f8f94f6802",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "626ab004-e578-4013-a9d5-9e3687df6a2c",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ea51cad1-0d50-4a26-91a0-09ba0215af2f",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "ca33a0c3-cb4c-4dfe-9b13-5958cf0ef2ef",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "66b73567-ae9a-45df-a353-7dfc03c05828",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "bc770c07-756a-4558-b821-7b4b2fd4fdf5",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "2a49e675-93c2-4d7a-bf28-04b1b3fff12d",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "413ef7c5-fdcd-4184-b358-585b25bcb394",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d246ec17-44cb-42fc-a73e-2df0f94079b4",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "17f68069-0d60-412b-9981-db87b1ff625b",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "3a7a4e84-3d72-4b2b-9b09-6ba63ac47993",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f61838a8-7554-4e9a-be68-fdb76bdbcbff",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "30fb9be6-29da-498f-9cac-3cd5dc3fb621",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "79132da2-efda-4003-a6e3-570fa37d8400",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "e71ddefb-4b15-4fca-bae3-30a56ebde4d7",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "88fec45d-03c0-4fcd-96a0-03f452a0b527",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4473928c-c64a-4b24-8710-7dfa568fa4e4",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "7d839b9b-8671-4c8d-9b95-d30a5f9b35b3",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "6e060e30-2556-4288-a914-85f0a34121aa",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "3e4a076f-f3aa-4ce1-b0db-b7a67305003c",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "aa736c22-f24f-48c7-89ce-3b467a6ce9f0",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5cbdff04-e75d-49f1-81ae-6fb206b93b53",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "434b9a13-6a0f-45af-bd57-22f1b8898ba8",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "6ee808f4-6e2b-47ed-8be8-6ecc267291e6",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "87717836-f51a-4baf-9a66-cbd5b373358b",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2f963a0d-feee-4323-8c76-2e89f4f25918",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "dfdeb104-e7f9-473f-bc22-a3ea2b2002ff",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "8b1dabae-cbb9-472c-b66d-2da4dd6bef5e",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "fbbdb60f-12c5-46a6-a13c-0e2524783e7a",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "32128629-9325-44d5-b3da-a229db94f19d",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1daa4c6a-422d-46d5-b778-be06d419aeb5",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "059eea48-07cc-4dbf-b2a9-6754e218f4f7",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "9ef1cf69-0ba8-466c-9b3c-d5887c8203b5",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "d0e05eb3-c5c8-407b-9141-29b87d12827d",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "15b1c8c5-ae37-496e-9439-af9d2d972d05",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "e1033905-5ba6-48af-abd4-835655e18703",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "19d5b17b-074b-4eb5-b8eb-988e0744d00e",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "345eba58-698f-4e9e-bcca-a5ea35f2832d",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c9ade514-848d-4d74-bcf8-54133afa6b11",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "0de8197e-770e-4c53-b66e-2e998f1e8277"
						}
					],
					"id": "0d2cb592-c344-476b-ad05-ab31642d196e",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "edd97b11-06d2-4b32-a0da-e5376b31aedd",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "9e648001-4738-437e-902b-755bd22d0473",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "bd938d68-70fb-47ba-98a0-a0b672f17ff9",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "27c435e7-b123-4e2a-8e35-7f3934370018",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0789d7bb-b1c9-4b6d-8192-f1bea3497145",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "780fc9ee-c5ba-4895-9ee7-4b6385d1a0a1",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b29c18e1-a04d-4174-806a-1d8c3174f014",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "e9c30878-4fab-4cd4-b100-49bdada68657",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "9271c0b6-7973-448e-ba92-5a15b5df0134"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "30c2c764-9243-4483-a9df-37377f151052",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "93049c2b-18f0-4dc8-98ca-5684273ef57f",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "dba99426-8322-475a-876b-b2f2ce0954df",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2f49f2c6-bff5-4a8b-8956-1d4645ffdfae",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "3e663ef8-4275-41d4-9e0b-d3abeb2bd789",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ab833b58-fb7e-4323-a92c-a465f40e0136",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "94c57ab1-3e11-4956-b2dd-86cdba01d24c",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "84d91573-f6ad-4820-922b-5f37b59e7e20"
				}
			],
			"id": "5d422a02-0d2b-4b2a-b1fe-db202c040bd4"
		},
		{
			"name": "Tests Copy 3",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d21bb75b-43d9-421a-a728-04411d8b9c61",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "03019f35-d7fe-456e-a597-8af29d7e0c33",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6b11d9b5-83de-4951-80e9-e9c05cfa8e29",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "b84de41d-0c82-4a95-b9a4-53cc6e410fc4"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c4852c44-4b74-4b1f-a5ed-e05d7c508560",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6c397446-1b3a-47fd-bf31-eebbc2dfc6a6",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "53f11224-ebed-4804-9e31-9bb53e7244c5",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d7fb2e47-5344-44b9-9aa6-57ff7d3f6290",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9fe2a6a3-faaf-4a33-8101-e1c1d8fe6ee0",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "de95a953-6823-4c94-ac27-a4139c3e7383",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "89a9ad7b-98ab-4186-9fac-2f864bff54f4"
						}
					],
					"id": "20154872-be5c-4273-89b6-445fabcd4cde",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d26da9fc-0ecc-4ca0-b27c-b4b89f00bf95",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a4ed203b-aa5d-49bb-9ac4-6ce4bcca31e3",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b78a5da0-9396-402f-8095-72d5d345fa6c",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "75204f2a-6a3d-40f4-8915-ef7df76f4e5a"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8ebdad4e-1731-4652-9901-0cb3e33d778c",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "919c87d2-3257-4fdc-ab8b-ef3fa654ef0e",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a211ed67-f7ae-4889-97af-497800060df0",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "b2478a65-ac27-4cab-9e23-172512f104cd"
						}
					],
					"id": "5fb82f98-780e-4df8-845f-2d21e4b18166"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "7a57de4d-122a-4e3a-9e6d-3245669645ff",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "82948dd1-a288-48ca-bfb6-538f3195b56b"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "dbc1335f-0b60-4c2e-b440-d659a14bbbf5",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "d49836d2-9978-4df8-927e-3a4bcc0e21cb",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "1d5c69a5-6bea-4f07-9ef4-6505e81917f2",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "bf75ab50-7d4c-4904-bcd8-0e5e3dbcd2fd"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "9ff0a9cb-bbaf-42be-843e-50de5d4b8ad4",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "6b694b85-b9cc-4377-bd09-11c2d2dc590a",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "c532cac0-8bf0-4022-bdcb-2ac67d36ec2d",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "eb27a6de-ca0c-4e1c-a402-ed339d5a2b3d",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "3afa4a82-ab38-40b5-ae1f-03ac711781a8",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "018d8312-3954-4a04-84fe-fa3a648760c3",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "56fb5a10-0d54-4ce2-a3a9-16a7aecef160"
								}
							],
							"id": "0480457c-efcf-4aac-a8cc-cddf61d47689",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "8ae118c5-6e69-4238-aee8-2a68e85e1773",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "e780701a-d906-473e-a649-fb18600631bb",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "22591610-337a-4e6a-b36a-a9503430f14d",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "502166a3-d183-4dc5-a04b-c1068d59bc40",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "d577a476-3930-4855-b053-9bb8bd62f25a",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "54c1e126-326a-4bc2-b378-bf93e5ebdd7b"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "33529d41-cafb-4372-9e5a-ea8ea7f4d3bf",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "3de789f3-59c3-4fd3-8ad8-9c37631ee347",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "d9c5c727-5b66-48a6-b629-efe1c686be03",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "ee1c6de1-21d4-443c-828f-dcb8d5293b49",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "b2afa4e7-958d-4fe8-9075-9cefba9296ca",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "ec65a85b-9251-43e8-8827-32f0fef60e43",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "9502acc8-d22c-4d9c-b67d-8f711ca64d6b"
								}
							],
							"id": "352fd620-1c50-40af-9483-f04d58c0d061",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"id": "b397bb46-3241-4f4f-a99b-c96012dd1c53",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "81d7b6f7-1b91-4fdf-ae80-dc822af33e14",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "5ee3870c-47fb-4f75-b102-7ec3ec13e620"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9af024cb-d018-4c0d-a7b9-78fd378e3e52",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e1111b30-902b-4387-a555-682d8fec778d",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "8ec0a33e-2fee-480f-9667-6a83302bafe4",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "b2eef64a-7e29-46b2-a598-59755d31e163",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "eae7c002-d802-4377-99d8-89a0e0381e3f",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "66244f6a-cc1a-4e82-8d8b-7dcca44eac48",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9ede6f82-6480-4959-aa60-ce3c3c933b1f",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "55adac9e-52b6-4184-8077-44897c45b206",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "fce322d8-5157-4171-8821-05f9dd561eb9",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "02b7ef8e-8c7c-47d7-8c68-8f08877da45f",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "b8cd9938-001a-4125-80e9-e4d00206c7ad",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "af65ec52-f63b-42a5-8c73-7dc9e886611a",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "38a7c163-28ae-43d8-8280-1d42c5a9bf9a",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "2357ddf5-996c-4243-bf5f-a9146e48a24d",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "24d9f6c0-dbae-42f5-867e-c1c0ac9293b1",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "e885bb6d-7395-4adf-b5d5-7216664b3b31",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "3b45ccb5-1bcc-413a-bc9a-525354c8ef62",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ac6374cc-9e0e-41e7-ac58-4170577bafac",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "0c5fc951-474d-42b1-946d-09b08fb38e12"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "743c3774-9693-4c40-8861-bebf4554100c",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "dd219c91-1a93-423f-9abf-8ef7d34db84b",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "2c6a2f94-0786-4211-aec0-72f094ac689e",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ee19ac16-b98b-4057-88b4-d4df5e18edb7",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "f142845f-b988-4671-81c6-cd2ef8d83948",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "23a43280-b8c1-4cbf-813f-ca04299aee4b",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "880bac7d-af11-4c5d-b0da-60c397b9d4c0",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "35041524-78f1-4b7d-9b98-42f54979a22c",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9f6654f2-e60c-4314-8200-0b6ad6019b61",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "db37b737-6330-4fc3-b95d-a958953d2018",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "9a38d5b6-3d30-44d3-9d63-c9ea4d5a1cc2",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "cd29618f-4ec8-45d8-8982-e321f197aa9e",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "2bdfc697-d95c-4864-a1dd-7ef1f9a5137c",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ad595411-dea0-4879-b8f1-7a96b905ea78",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "d1705c53-9b00-4d98-9b3f-d6f84c98771f",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "ab55175d-b3c6-433f-8532-dbb946b3c52f",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "0c90f10d-7290-4cc7-b57c-bf60568bc3d6",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8d17ee23-6552-45a3-8e94-f336a3270fbc",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "df751f07-5310-4e7f-a0e9-2594c2564e7b",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "4af0ee6a-4f22-4053-bdd1-2e3fff26acc4",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "6023a34d-b6b2-4ba6-b5ea-7815ecac0933",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "e59f3b76-26a1-43a0-a3c1-afd47da6a42e",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7c9da96c-b8c2-4113-ab91-91ae5dd78359",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "931d6b15-f381-472e-87f6-f8083d28f41f",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "da086bff-e079-4617-a6a2-0258e16b07a0",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "eb0f3974-3378-4ba4-a833-b4183343e9f4",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9c814662-75cc-4195-a013-4d2771f321b1",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "862d77b7-12f0-47b9-abb9-70273fb196f1",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "7ff8f2a3-3d37-4c1e-b22f-a4ce3be7278d",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "55a4d62a-7434-4466-bace-e0815582272a",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "1e1b9d86-e34b-4f32-997e-684f974c5dc2",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "04574ea9-2feb-4b4e-b4d5-f14c282d89c2",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "c9fab562-4f73-4c0c-affe-d7c349179954",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "e62c2417-5a84-42bf-b496-98762d757351",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "dbf88f44-c14e-431d-960d-35853fa7554c",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "23caa968-1d03-4f45-ab08-65f5ebdc64ca",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "252d2418-291a-40f5-ac49-408837120be4",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "26e7f0a6-c5c1-4fa7-ab10-4cc5744f5ba1",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "616d2049-1610-486c-b82a-fed44867fe24",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "d9b3ab25-b907-4438-97c0-27f4dba2e22c",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "90dfea1e-7281-4fbb-a214-3f57cb71b934",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "fedefac8-f0ee-48ab-9be0-d9f037324f42",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "74784d81-4b6d-4657-a914-fbd36311fcf8",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "8216c30d-88bb-43e9-b461-ee94ffa15bec",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "97c76845-e232-43a7-bdf0-d2ae72a8c530",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b6b81bdf-f573-41db-bd95-553501145104",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "944fae5d-76c5-473f-b828-8e45defa4e6c",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "3e69ae74-7c84-4922-8332-7f8147dd3f80",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "7e846716-767a-495c-8262-cc1b332fb8c8",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "22b67f9d-97a7-4d7a-9766-13b5dd82f379",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "12c69f7d-d8f1-4c94-8301-9d2bdced3ca3",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "6a56e677-9881-4360-8d34-6d1b9858dfd2",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "b73779b8-e2f9-421d-9a88-f8094f5deed4",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5e641ff6-682a-465f-bbb5-7fc70b8aa710",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "c0fd926c-e276-4026-b613-555dc21da1ce"
						}
					],
					"id": "1654bb9b-5b16-40ac-86f8-0caae7be4943",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1e129a4e-9541-4971-9878-1e6ab2fcba03",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "1a6a7327-ac91-4fbe-b62a-1e54c4a19fde",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "be440e55-93a0-45bb-bf36-fe27f55737c0",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "d7f9e2f6-59d7-4f4a-afde-9a845699c5dd",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2f38d689-b5d0-4c3a-9461-e0ae3e2876e9",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "45568bdf-f67c-41d5-9a67-55b023ac4b7a",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c7367457-a374-433a-bb6c-b1b4dfcfdf3e",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "24c9fb97-23c2-473d-afa3-3f68a5b87bb4",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "e409bf52-a3b4-44bf-9ead-ad6a1bc609a6"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e0098fa0-78b3-4987-b599-2b8df1f3312b",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f41cbe85-d138-48ce-b794-716c24f3bdf0",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "48f6f203-8c0e-4b8d-af68-ff5bd65d11b2",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fa3b49b0-b962-4c7e-a7a8-1d1c23805ed6",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "ffabb81d-8e16-4876-92bd-c0ac5b6f7ca5",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "810c549f-7c6e-4d1a-a383-719b31bff660",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "f0343e25-451e-423c-8032-2040d4fa5514",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "bb3d9f93-1b07-4df8-96d9-112d22986f65"
				}
			],
			"id": "b1b728c4-a673-4bad-b437-23ef98688fa5"
		},
		{
			"name": "Tests Copy 4",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d7027a19-91eb-4a5f-872a-f38f9b5f439a",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7fd71c73-9c5f-44fa-8a76-1ac8f48b418b",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "57397d90-fb4a-48b8-b5ce-1d419070c168",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "966c8361-dd10-4ce1-b92e-0083e9a81dad"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "549dc769-23c3-43d1-9a58-7a3223561f8f",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "924b9775-bed3-4efd-8a81-ae641569f995",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4f599bfd-480b-46c7-b9f1-646dd484e18a",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e80a1f67-9409-4a6e-adcc-5513bbb8cd44",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6053775a-ad9b-4ed4-8d24-5176a8a7cd43",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "97db80bc-5903-48a5-83c9-7b59b1adfa35",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "178fb371-2b9c-4cb0-9ff3-9f04fa91525d"
						}
					],
					"id": "188e5754-60fc-4379-9d2d-d66b2f9fe8a6",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ba589bbf-4a8b-4630-8957-1f1f2350ce64",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2cf342a3-c75a-4d4e-a814-94558752f508",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d7188745-6ff7-40a3-9e47-f2be6b70f4fd",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "6aa149a4-d326-4a55-bae4-743205b8f163"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9ddc03d7-68a6-42cd-9593-da1a923887e1",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c62c014a-46ca-4816-b81f-79959f64f5d4",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0e190e64-e3a8-40dd-8f45-9ff39d647f20",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "bb1056fb-ef20-40f2-bb36-97a9776e873b"
						}
					],
					"id": "3ebfbe9e-3309-4369-9209-b7371fa1cd1c"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "fff9b7d8-d872-4822-b847-ad68a0b04041",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "19595c9b-728c-48b3-8b8c-4f7cedb30441"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "3027c9d8-d062-45f8-b11f-f4316c6d91bc",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "8d20785a-4922-487b-8236-4ea8c2a3b2cc",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "e615a285-df90-4f1f-88cc-79386f38a391",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "ec4eeff8-dc16-42f9-bfb9-1c7f3a2c541d"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "50a4bcda-0695-47b8-a677-c99c0d874bdc",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "fb862bff-32bf-46e1-a48b-45d837a05ce3",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "e38fdb16-f9fa-4a64-880a-2456cd5b76b8",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "e03cfdeb-60b0-4f5b-a2e6-703a1f292ad5",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "a7fc3ba3-1896-4d35-a1a7-76c8ac0b07be",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "2b34cb28-c593-4205-8309-4cff364ddf8f",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "366c5362-1c39-4ea7-a1b4-ca0a878bea6f"
								}
							],
							"id": "e4f871e5-06f4-43ba-8708-b87823c7397c",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "e30cd648-f16a-47d6-a5ce-e0289f011f6a",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "b117ae25-1cab-4d11-adfd-79918868b726",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "8837295f-4034-4acb-81ee-0268b82fe857",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "e1a30e7a-8302-40eb-aa8c-bcfaaf039662",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "72745403-fa12-4b7a-9d6a-d8966d686cef",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "cc2b5dcb-b2ce-44f1-a725-327670fa14dd"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "8bcc15bc-213e-4406-be09-54cbd8cd401f",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "cfd41c29-6433-4023-8562-c9c063a92d82",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "5deaafa2-d8b5-4b85-9177-5a0e65931e61",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "9df27b1a-a4ab-4ea2-84de-2a10c56a3e8b",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "a716076c-6b8d-423a-b379-f1f5c31df431",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "a70c3a00-2c9f-44a1-aecf-0878a1d54911",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "5c7620a0-a148-4679-a859-fd78651c0712"
								}
							],
							"id": "af59d48e-2622-4d8c-90d5-5703301c68bf",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"id": "75673b6d-6098-46a4-a9e7-64b9d6d16485",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "33a1eba0-7528-4f62-ab40-ed12d42a3b0f",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "38565b87-c203-4e62-8c54-10d694dc40cb"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6db86193-205b-47d7-a546-2b674ccc90a7",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "724d3188-dac7-4811-ad7e-a148a55461b1",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "2d83aca4-cb4b-45f7-af32-cf09d79138bf",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "4b7ba07d-6446-4a7a-9704-6c39fd7429e3",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "fffbfdff-f175-4dad-839c-48912f9788ff",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "c6cd290c-1053-4224-984f-8968ea7a6c0b",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7edb7152-5b98-4372-8a4d-92c985dae376",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "9e15555a-daef-4b6b-aaf7-2b8b3022cb8e",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "40afe4fc-e3a3-4501-b505-2a420c7826c4",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "12eb89bd-553e-4b92-9b35-6f353388a087",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "433aed45-3842-44ee-9484-8fb162a2b11d",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5bd1b7e1-36ed-4ef8-8d13-1424e962a885",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0e13b597-16d3-4727-9b06-0985cf834f10",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "8a420458-cdca-42e7-8c80-c702e0908f25",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "261798dc-f971-4916-8e02-f0d3fb675a22",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "4b3f59df-2c14-44bc-8acf-3862715c1540",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "f75d4019-92ac-4af7-8687-44d0cb315354",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "dfa84e66-0279-450e-83be-2e658a4d4358",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "a39617ab-6c54-42c9-80a1-26b8291d7850"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1e874941-2c8f-4388-9c90-9d42621197c3",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "e34d7524-6ee0-463a-b111-31a348694a78",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "8da65c3a-9c0f-4efc-a3f1-e6acf1a00b28",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "18a69859-3619-4ad3-a3ce-351f85d58ffe",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "7e957973-468e-43dd-9712-1f1fee887d56",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "0a5160d2-95f4-4b4e-a940-f777aa8065e9",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "2c57cc06-9866-4881-8424-005acec737f5",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "fc4627d4-64ce-4224-a8ca-d1ceb628db9c",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4622ec63-7f08-4090-bd9d-a3f49531fdce",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "d7b0bf11-03d7-4c72-8949-c3777fecbb21",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "187ecc85-c1ee-4c6b-9972-50b6289a4f8a",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "49605442-31d4-4f7b-927b-7f11554ad33e",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "adbe4236-3dac-41bd-bc15-eea62a6d0650",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3178c6bb-ed03-4dc0-8b0e-7ff4a784a024",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "2faca37a-c254-4f99-86e0-c68e060588ae",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "73872852-c360-470b-9ef1-2bc6d5c0038c",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "bcd1280a-dfc5-4afe-8ee2-f2acc112b458",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "531634fe-eb4f-4b0e-87d6-eaa9408aa637",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "5b40f016-ce75-42fd-821f-8a050b46a8d6",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "499fd28a-d626-4e74-ab2b-879dea29dc25",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "4799e9a7-a4ec-4c45-b022-ab16895f0cf3",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "3911e8a6-11cd-4fcc-8e08-6c5c4cf9183e",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "91bbe8e6-f4aa-43fe-8b96-da4cae9a6f2c",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f5c34c5f-ae69-4a77-a30d-0c2bb6e438bd",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "c3ffd79a-acb9-4af4-851a-3433a759c62f",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "59944be4-92cb-46ef-b11d-acdf3971ad18",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e98b44fb-832a-44a4-bcbb-883d8972913f",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "1cbaa898-69f8-4b8c-a601-5cf5ca89b590",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "a84c5803-dc65-4db3-ae0d-5cce7ec3cd71",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "fc1a4678-8e10-45c3-b276-29ef2813a062",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "4b5eeadb-97a1-4ca7-9ffc-5995ba7fa783",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2500c662-166b-4201-a191-6c7dce220e94",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "8df39dc5-eca7-436a-ac71-34c305258576",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "4ad9beb3-e31c-4057-9b83-7fbe04888a57",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "31698b8b-e130-4fde-a525-ce9f6c7b4cea",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "63f5140d-7d18-4407-ad74-b4721a9a00ef",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0fb28cdf-b331-4fa3-9206-58ab7e9f6466",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "f2abc2bf-d1fe-42fe-97a4-c9ef2f0e5916",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "b50401a4-2a7a-49d2-8f1c-b99285435a4d",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "f040d40e-c2d6-45a7-8321-4e5e974f4616",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2c71f683-8f27-45cb-88c8-dacf067b8e49",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "e7d6195b-b1d5-4de6-ab49-f400b87f15ec",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "da5b84e3-69bb-4621-93dc-3c0ba514620e",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "ca7ea8d7-b5f8-4841-b5b9-307135fae69c",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "aa159f21-26b7-4a77-8684-4a6f452f79e3",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a6ef3150-cbf3-46e0-b00c-9534fcf1a9be",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7300350e-3f98-4c72-951e-65769f5558ca",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "3ffd2641-3e72-4cfd-b08e-bc1f9898b332",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "1ad3cdd5-3437-4eb7-9df4-19d890e714a9",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "fdfc9c29-5f1d-4d7d-851b-067b08f3342f",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "a85e2d82-e9ae-4895-9823-5b8b214d36dc",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "cdc5bb9c-5c08-40a9-9351-f9aef6f4acf9",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "9bad62b6-f21d-4de7-8c76-ecb5efad32af",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5629d913-bb14-40e5-b6df-4c7d5b5d6d59",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "f9b35749-7a2d-4a8c-a145-1752f7889c3d"
						}
					],
					"id": "af3d35f9-00df-418d-ae0a-0d621a641c76",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f8e33194-6935-49af-85cd-ee9604874638",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "3177770d-8a16-4580-ba1f-3df5e2e5edc7",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "575df346-ec9e-4949-a26f-2170ee189d4a",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "6bd69ae1-1b29-4b6e-8e73-a7e3dcec05ee",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "43ef8ef9-c066-4535-b9ab-da1f0d0ad423",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "eebd0b31-e809-44f3-bc1c-a78079f80798",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "67764ef8-83ef-494d-a99d-136dc54ebbc8",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "7ea8212e-a5aa-4a75-8e37-aab287629030",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "f8e61de6-e41e-4ecf-8ace-0f7c4be4650f"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "dd4ef0be-d73b-4452-a459-64d48a546106",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ec619622-c1a8-450a-8191-9d6320027677",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "16e973f8-17e5-4287-8474-384f0f38b3f3",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8ac5e22d-40a0-406d-9f83-383a7e2bb71e",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "4abe9e6b-3741-41d9-b565-8577bbe0b021",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2c3d0a59-6803-4aa3-87ad-3df963fe5cdf",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "83351285-a4f4-47fe-ba04-eb10c30640e7",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "97ac3fdb-6942-4d26-9406-eb6bc97af5ca"
				}
			],
			"id": "f8fe1b16-c431-474c-8db2-0dd146f1498c"
		},
		{
			"name": "Tests Copy 5",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "25486faf-4524-4d2d-9a94-05bbbf03da29",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6d3e1929-e6ca-459c-8e66-6ffa07c8c21f",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "45c6ef72-e180-44e7-9728-e048034bb237",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "2a230c0d-376a-4201-85e6-4554698a18fa"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9a61c295-6bb7-412d-813a-2652a2683a23",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c04073bd-c6a7-4df6-a0e7-78c0d53116e3",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "81a884e3-fb18-483f-a557-69f73653a09f",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b18ada00-24ce-4525-b335-4a4e48758c43",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "71ed7807-2740-491a-974c-999a60303d16",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "36c7433c-e7dc-4545-b9ec-696ae7e94fc3",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "d580066e-ed77-45d8-bddd-82feab9a56b2"
						}
					],
					"id": "f7b4f707-c78a-4a2f-bb3a-c23f567f9384",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "297e497b-8f67-4c6b-8d6c-733614b29e32",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "27525e39-6eb4-4afe-bd67-679ca29e7d6e",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4e279776-a8ec-44ba-98d5-a3b555083ad4",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "c2b8e555-a941-4833-a1d7-42a3ec882819"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a66bf84b-cbb1-4a97-8a4c-a13e3d82fd1e",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6015ef60-4517-4d65-aaf3-c9d38ea89364",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "37186d7c-facc-4f85-bff3-19da4614e5bf",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "126b2b95-0232-4ad6-8161-bcd935a3c52c"
						}
					],
					"id": "7ac855f4-e9d0-41b4-af02-df35e5861f3d"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "fd7c6cf2-a5e5-49b8-b494-5bc295b34107",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "2c700c66-0ac0-4fcf-a1f9-c676081d236b"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "13d2a18f-8c95-4f27-a425-d08c8287ad49",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "64291a75-cdb0-4427-bfa5-908c92706e9c",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "6765c54c-ab8d-483f-9a7f-add256b913ef",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "9ccf86e2-b6e5-4eba-92e5-d436b419d22e"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "dca9983e-fe36-46d2-bfc0-802111fa6b08",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "4d115700-0708-4c05-9bce-865984eae169",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "a2ba84ba-d7d5-47a9-848e-ef3e9d43b078",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "f4e3f7ef-5c7d-4441-88d0-172756202dc1",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "ba521db2-13be-4ac3-881a-9cca15cd8a42",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "c0990f53-3017-4e2e-b257-dcd15db023be",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "e010ac8b-bf8a-4a8f-82b0-57840a3189e2"
								}
							],
							"id": "4874bc1e-6653-47cd-bff5-a751e80f8337",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "d21490af-60b5-4506-884e-17c8f3f72894",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "9f912c47-ff3c-4335-8b94-e0f252e61d23",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "bdb3d9d2-1e99-428c-a608-ec004e40975d",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "b2abc310-db91-4d0a-9738-8b92f9620084",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "7d3c5daa-c9ac-4033-ba0c-ade924457c84",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "d857475a-74d7-4c3b-ba8e-0f0526f8fc37"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "e5c82370-8dc1-4794-9d4d-5d28b8a3d9a1",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "4e26e393-4b9f-436c-9f54-698f57d415ea",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "547110c1-60a9-46a2-9b67-3a3dd956db92",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "5fa9855f-7250-433d-b639-b9625ab731bb",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "52c16cd7-051d-4ebb-827d-58adf2cabbe9",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "309520c9-2bce-40be-84ce-1568c0a7bfa0",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "1b5f397b-bbea-4398-a856-a150a848fbdb"
								}
							],
							"id": "54cbf873-9514-47b7-8de7-6d01b2a9519f",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"id": "eefea512-0b68-437d-9492-bd2090fe5546",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "04cf6dc4-1fb6-4815-a534-54bd86ac50cf",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "705c2be0-36c9-499c-893f-08dcd14ab9a2"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "095523ed-7d6f-4e85-9fe0-03155b397ba3",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c4b2a884-1827-4ff4-a413-eb53422e806f",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "bf184520-40aa-441e-af47-6723293d66d4",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "5dcdb774-7268-42f4-9379-acbf1185631e",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "691e0833-4f0e-4d69-b313-bfa2a7d96831",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "aa9862f2-360b-499c-a01b-cd023a58e6d2",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5c37dc93-93bd-4691-a9f1-bcc121617e5a",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "3a460965-3377-434c-bd31-fb758fd01f2a",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "44b16f94-8e8f-4c44-a698-e584e5f30bbf",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "348e1d82-5cf1-4de1-b162-b7baa2b87919",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "b83b7d57-cc5c-46c4-b587-c95124e0ea28",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7ea92413-6afc-4730-a8d3-3c53eb66598b",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "978a3bae-3bf6-4948-9e6e-5268a8e6569a",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "e3cbd2aa-5d44-44f4-9644-b58db306ea94",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "354f995f-0bfd-4ff0-bc11-64b410f0fd3c",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "d3c9b2ae-15c2-4e4a-9453-2bb1c42b4eb0",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "15438ee3-ecc6-492f-a98a-15c1c44ef257",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "561e6e2c-5d7c-4e74-8e70-befbec045e13",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "b5f71138-963c-49ca-9632-930701c69728"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "92ef6979-e609-467a-8d70-bdbf2d23e8a4",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "54615ccd-8ba0-444c-add9-03e8ffb4961b",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "51e78f20-d187-4082-be1d-60be87784a37",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4967afc8-26ba-46c5-a772-e9e2ad63fb97",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "40493126-c24b-441f-bcdb-7b58dd4b32ca",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "fe041a97-16d7-430e-ba71-d16de776abe9",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "542db0f1-a647-4107-992b-8f8ef7b912d8",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "a7bf6fce-0b74-4639-973b-f0d7470ee5f0",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6cd1caa2-c759-4ccf-a13b-fd87d18bf797",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "50eff9dd-52ab-44da-bdff-206881cfdc4b",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "e001a65e-bf24-4b0e-9371-b12f08ccd0b4",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "1cbabfda-7273-4e37-b5c6-088fb1a574a6",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "507c2042-f5ec-4a26-9417-702b205a3051",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2b26885d-2a4c-47ee-8217-b2540f84214e",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "a031c72d-c036-4a90-93ad-dbedb050c412",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "12ab73bb-6c73-49d4-adcc-2a7e1722a029",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "0c2d418b-eb37-4b42-ae33-0eb0668eceab",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2df838ab-066e-42e9-ae9c-ebdf76bc422e",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "b1efafca-5d5b-4628-9914-1bf0198ba8e8",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "eb8f96b9-3274-4a77-84f7-72da4db3f201",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "886a21ab-5ad7-4760-bb84-ebc714e32a5a",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "435e02c2-86a2-4778-9811-070a5a4f5c39",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f1323580-7bbf-4cb8-a347-1f51cfe974e9",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d8610f17-ddcd-4e4e-a518-304728df8f07",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "dc37239a-752c-4aed-b6eb-140281aa0ca9",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "895471b2-902f-4064-9a37-540c547030ec",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7392b744-9033-4db9-9522-d92a33184232",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "7f23b67a-a8b6-43bb-942b-5cc4c97f6c81",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "0c8c7973-e27e-4908-8609-fe3ac73855ed",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "a59b2bbb-1297-4baa-a1b1-01c4850e8f69",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "c1d81e9f-00c9-4e02-add4-aff36ba4c1f4",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0c00acd7-b1cc-4ada-9dfa-ade864e35fc8",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "1f13a430-0440-457e-8113-ba510f796cc7",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "98d1fca2-5ac3-4379-bd4a-2923b43f0ecc",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "5aca74be-66d8-4fd2-8064-42941dea24cf",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "26e37c54-a1b8-474e-8380-36ab2e2bc196",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "049f20f8-a942-41c3-9b07-aa05f4e646b6",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "bb52b80b-9836-4c92-8e8f-9a31282cc5a2",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "0e541fd4-1057-4649-94c3-dc640094f4e7",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "a1cc451d-61c0-4a31-8a77-b3823893a680",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "85ccbbbe-a6ed-4a68-a537-aa0e8bc41ac8",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "bb61717f-4dec-4da7-9176-6b6877359ac7",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "592f381c-0dc1-4ca5-a824-91019eeb248e",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "54d22648-e6ee-40f4-924f-cd3eab764edc",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "e2b25194-a2c3-4b7a-94c2-d9d6bb79f665",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "fec173c7-6a28-4ce4-9703-65fd5a672a2b",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f431842a-cc9d-4782-ac0e-847f97f3eec3",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "587c6d51-63f3-45d2-bef6-2e6e83761e26",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "72278903-69ff-423b-8f6a-dd01d2b74dd4",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "15a1b367-2a6d-4c5b-9b56-b3bc7a24c299",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "798d38bb-d724-4153-93b9-505cc3b63e89",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "36b68c88-e45a-4778-b446-de801e8a89bd",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "55bcd1b9-0413-4ba0-8a13-907c17594fd1",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "14a03a8f-173f-4e98-8444-78a3e24ad58f",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "a22c3f35-0a39-472b-9c02-5484b1616705"
						}
					],
					"id": "dfe2ce8f-c798-491a-bfd9-fbb90234abc0",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "04281a06-d1fd-45ee-89cc-e65daa1c7535",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "6bc90900-e2b1-45d4-9688-8a4df1fae4fd",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "c0c20106-cdf7-4918-ac1c-ae888d1e8f2b",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "cb8dc497-099f-4333-9eb6-a2dd8dcc5896",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5611f701-6760-440f-af34-04565d5d81a2",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a242cec1-5ff4-4740-87a4-dc8d96ac01a5",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8cca12df-2bfe-4ba8-9b92-d21c7bebf549",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "9a9cef33-7cbd-4362-9562-71b579b187fd",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "6ac50c8d-b109-4695-8246-9ce81908fcf8"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8c1abfc6-3974-445d-acae-a9758e48f86f",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c38bb6a8-2b16-4faa-b97a-9bbacc695cc6",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "d69845d2-9d0f-4588-ac95-a8d02bf7a538",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1194d9c0-7423-4fa9-82d7-e56c127e8b33",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "977f76a1-0b63-4010-9716-fee2cbc0106d",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "46bf5fd4-4b42-425b-aeb5-59a5b27672f4",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "5ef72953-a495-4cc7-ad95-39dba351cb81",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "d5458cd9-62cd-46f2-84a8-ede220f98f94"
				}
			],
			"id": "0e4dd028-2687-492f-bf9c-746e50297188"
		},
		{
			"name": "Tests Copy 6",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "aae709af-c444-464c-bf3b-11c4580cd7c4",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "54320fec-7b86-4a00-84cc-915ec2b67015",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ab44f304-4fb5-49b6-a624-8b7a3dec653e",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "02967e59-85e1-4882-a6bb-7874ea6da74f"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d0596970-01b4-44c3-8264-664e23ec925b",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "49c79f1c-a85e-418b-bc6b-0ddf023e9aa0",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "067ff9fe-a4c1-4b38-8237-ee2d6d8c876d",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "bd49a817-6069-4f6f-a988-c7c4eca67163",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "25acb717-c95a-4a00-a838-1a0266dc8bf7",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d4acae1f-b4c4-4fc7-a250-b8ea36d2a893",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "cb4c573d-6a66-469b-9903-ec7f14ea5157"
						}
					],
					"id": "4fa2e40b-c952-45c5-a804-5075d54cf29a",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "bb8d5c1d-c222-4f26-85a2-e5e389172095",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1d251509-e7b8-401d-b523-f2cd713c3350",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "63169952-6b52-4014-aedc-6a9afb967338",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "4d1cb3b8-d951-4d7a-9eb9-c4d9ba8ee277"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "97aecaaf-7938-4dfd-9ebf-5540a2d340fd",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5299bb0e-09b5-4263-97da-5d4e47b8041a",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c0827c6a-07a9-4547-8658-266d5d609090",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "443e8c11-11fa-4418-9715-99888e388fe8"
						}
					],
					"id": "6a870191-588f-49a9-897b-e588cc960bda"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "867fefb8-192d-4394-b963-9cfe84677f32",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "f85c7d20-a27f-4ba2-ae01-818b2cfce405"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "7e5c4b7c-15f7-4677-8841-9204c521603a",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "9a820b80-d70a-4ee5-b257-1975d447b33a",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "12f67f21-aa1e-43db-a56c-7dcd9cfde8be",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "076eb7cb-3520-42fa-846e-0c8f5b873cd7"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "1c08f293-2610-43d1-a51f-7582be4fd72f",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "985fc62f-09de-48bb-b38f-285803938db6",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "e0e02016-8c8d-45ed-8c85-3d2444c50fee",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "b1cea1ee-7d71-421a-9dee-2bb86d57aa67",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "32b92b90-5730-4fba-b2a6-b8c8b241c005",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "4e0fc7f3-deb3-465f-8b7f-300b71a3aa6d",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "594d0a0f-1486-4efb-99be-9ca4301a6a8c"
								}
							],
							"id": "d2e88617-0dd4-4bf7-bd36-1c69407256f6",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "90a0ccd8-de5d-43ec-9f55-001b3f5a1eae",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "017ee818-272f-4b26-9caa-2ac21c6193ad",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "01e9200d-95d8-4d46-9fe6-462094e1d750",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "875b756e-dd8a-4993-8204-8d90970effd0",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "83c59c50-ec8a-4185-87e4-98b78e2b2311",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "ea447317-14df-4cca-8286-787584d19264"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "fc4258cf-f653-44c6-bf32-ebf232d0380e",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "87b3cf90-befd-4a36-8f46-51d8734c083a",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "3132138d-8adf-4ca0-a5b5-240e3967d7fa",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "b8b7705f-b567-4b6a-93bc-ec22d6acbdd2",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "b83c5e48-1d0b-4f3d-8d08-e45488d341ed",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "c50e7e64-936f-4258-8ebe-6d532daa28d4",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "1e014fe0-cd3f-4e26-86ee-b0c64ccbb938"
								}
							],
							"id": "b84ab30b-eeb2-4850-837e-5463ed6f2719",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"id": "dad9a0fb-3b13-4400-84d0-fd0d39840126",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "59444e68-e5c6-4c77-8b3b-0e0bb0379662",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "f5c60ba7-a969-40d0-b1b1-01392c957071"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "114da72d-a4f9-496c-b7f7-eecdade60fa2",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8fe27ce8-a554-4529-b86d-964187d4e58a",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "f603e5d3-957b-43f6-98c2-b343c114d2da",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "e811df84-f1ac-4b62-993f-8c3e5f68a9e0",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "95a5d323-5631-4620-97c9-72393a0c1f37",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "7164f2b5-af3c-4d7f-b5a5-803cbb238169",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7b17682d-e159-48c5-ad29-7bf8c3373abd",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "48a33fb4-0d0c-4477-b68a-fb5a2d509e32",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "4d474e90-c4c5-4deb-8ef9-ba1bcaf18b56",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "da46db94-2d62-47ac-a058-26997e35662c",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "2d6d9754-7d14-46ad-bdd8-4dbc9f1680f9",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b9224ed9-13d6-46b6-811b-ad2ad4fa479c",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "03ea622e-603c-4bd0-8207-1fdf55e7a0b5",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "0c110467-8afd-4405-9ce1-1fea1677cfcb",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "7916769d-f7d7-4d93-a81f-5e142b814694",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "4bf37418-5e1e-45fe-b5a6-6a07dc01bcc0",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "fc43037f-d975-497b-88a8-83541fbc4433",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c794bff8-a371-4878-b889-38a3c9d7eed4",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "d5f78994-1e6f-4aec-8af2-911afb89e89d"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7be81e06-3840-4998-af8c-fa5c4f0aac13",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "438f6244-2460-41c6-bf48-6707eff2e7d3",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "24fed5bf-c7b5-4df1-a7c1-7b5579766458",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "52e6b7fa-b066-4118-89d8-994b4998fb27",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "1c89adc1-89b7-4d4d-ab27-86eccc65905a",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "e328d02e-d45f-4b4d-b1ea-a4365222d460",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "e0e6ec8c-3d32-4bdf-8a22-ed16ae01fdcc",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "4c38d7cd-9c84-4361-b2dc-ddfdd276b022",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8c45f5b1-d624-4c40-932f-15c54617e176",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "4761900d-e2d9-48a0-8b6d-bfe4fcddddeb",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "ed352dce-91ca-4772-9d93-92f07c16b47e",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "cff8bb01-0e37-4a3e-bbb2-3c0d8c1ea92f",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "aa6edbf0-81ec-4238-8b26-6c6034073b83",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "42902f73-a49f-491d-9c63-d22f78ba6877",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "cec1c7d4-8dcb-40fb-9abd-2420d914f045",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "ad3e5c3f-2dc9-4177-bbfa-6de878a180ce",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "f274e353-bbaf-44d1-af86-a2b013ccb02c",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ad2be5ba-a246-4692-a04a-c148c25bd4fc",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "eb971854-80c1-4349-8f81-08836a6740e3",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "0c496422-3f77-4b9b-85d7-476af4af3b27",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "16046fa0-ced6-40f1-82db-71ba51324336",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "7d3259e7-3a50-4caf-a4a9-bb8aa464cdd7",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2ae22483-4beb-46e5-9d95-b95e4bcf3b20",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8f4f30ee-3156-43e6-a6c7-fa93366832f9",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "ae3186ff-99d8-49fb-9e0f-3e6830a2b4ee",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "67786fcd-7c07-485f-97b5-a8f06a7049b1",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b0642cd9-2e73-4c8f-8a3d-6c5ab9a8ac19",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "7892e227-2865-4893-a430-24201a736d06",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "c444e5dd-4219-4f61-b3ce-5c6176097b7f",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "fd1250b0-2b3e-4105-806e-6d0f0b39be1c",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "8979f859-c475-4cbc-93a9-f803d9951ee3",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8db19d95-acd6-4272-83f9-9a1b9556e4c6",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "c02a9809-e8b8-47a0-985c-b53aa128598d",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "5d1c853d-6c0e-4c06-87ad-36a51d9e6914",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "d9a6ec74-7fbe-4073-9dc3-75ada1035e9c",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "203ec47e-72cc-4714-ad7a-396bbdb72e61",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "de76c73a-7a62-42f8-affc-e060ed1f9cb9",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "82d1ab5e-7db7-4a75-8cde-c22bc215c7ef",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "e107dc05-594e-46c9-9a8a-58bd7e784817",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "bdd5cf9f-16ca-4a32-9ff9-833ffeeb1e3d",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "837740cc-5e60-47c0-8663-18e9beb7ac41",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "a4e3b75f-74cd-40a1-81a3-c9bac06d2baa",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "8e2838fc-ae33-4b82-acd8-071b176f06ea",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "3442d93e-4da5-400c-9d9c-527bc58ecbef",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "c7e12464-69ab-46b1-a8bf-ae8b88e7918a",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c90f0147-473b-4887-bdc4-7ddbbe119393",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2621983b-2319-4235-9944-73aa5dda604d",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "ef26f36b-6a81-4b7f-8bf4-83c7d91e587f",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "7f06bfac-3b65-48ca-b384-1cc64bf83554",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "45028f82-c74e-4d9f-8a45-ac1d1025a4cc",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "4452f1f6-6a0f-4622-aef2-877135ae3f29",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "f99c6263-3b82-45f1-96c1-01a18c4b4c6f",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "cbf4c9a2-fdd5-42e5-9df0-dfe28b6690a5",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "228a985f-b568-425b-96c3-39aec579454a",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "b580d786-fa5f-40f3-b18f-8bdf054b926d"
						}
					],
					"id": "6e6093c1-eee9-46a5-bd03-9abebd9dfde4",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d060fec0-1809-4cd5-8d74-102bf09fcba8",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "7f087ecc-09ef-4000-9aa3-7fc70e9fba02",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "5ee11da4-10ea-4cd6-9cd7-fe5e67a00c04",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "ca3221a4-6642-40b0-af7e-a6c4a24295db",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7cb19cab-8c85-4190-8592-504a1ae11b1c",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d4dcb568-a70d-4b20-9869-a5bf87315ee1",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b842a8e0-5e21-41ca-94b6-def1b231f0fb",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "d79daf6e-bcb5-4f5e-baa4-67d902b4979e",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "71bf2528-90e7-4a48-b0f7-12c14e7644dc"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5156ea43-d855-4ba0-ad2f-8c551a7fc078",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c9237e83-db83-4a44-b43b-cd88ad54247b",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "a8288f4b-6721-4853-ba3a-04ad849ebda8",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ec7a7998-5f28-4dd5-99ca-dd45714fb2c9",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "c0e71d13-4d70-4946-825b-f0e107c824cc",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2110b4ee-1b4a-4067-9187-e3c687a25e8e",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "066d3118-884d-4979-84e8-6b8303e0ba3e",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "1db0b4c8-97a9-4e35-a9c0-5421b746f2e3"
				}
			],
			"id": "07571825-21e4-467d-b9bf-dbc1347772a6"
		},
		{
			"name": "Tests Copy 7",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "94174027-af8d-4c4b-925e-2a341e6b37ed",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "37b7ccd8-a9eb-42b5-a89d-51ab3bd63097",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "aecd9596-157d-4a68-a96a-1a8f1c23ea74",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "eeb3fa22-c5bf-4b3f-83c9-5fae0bc7bebc"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9cc50667-2930-43f7-bb37-e362f8416563",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "93659caf-c123-4771-a927-d36d463bebe6",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c8c5ef18-2cb8-4d19-9fb9-e556eb108e9e",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "36114f0f-4bc0-420b-b51a-d8115b1d26ec",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e3e70d68-a94e-439e-a3df-8cba2c70770f",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7da09da2-6dd6-47e1-92d5-cb7b8db1bdae",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "c65fa66e-0ae4-4910-a5ee-ba81dcbfa1ec"
						}
					],
					"id": "b41c1e0a-daca-40f5-a6b6-8da63ad47351",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "bc221a4a-4a5f-48c7-9322-34cfb7de3828",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ef1a17dd-aee4-46e1-af05-db7408215db9",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ee82c8d0-22d5-4579-a1f7-44ead08c0ec0",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "8ddb7832-2797-4999-9739-3d8cbc17d02c"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d43de269-0777-4e9d-9db8-54b81639559d",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c92b69c8-643a-4c94-ac97-31cf0f15b900",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "78177996-4d4d-4ea3-8082-8f036c87528f",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "05d8a6b4-7b94-434f-a613-37825973bc06"
						}
					],
					"id": "c38917cf-98cc-4595-9fa4-94136749f497"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "64f06afa-f84e-4808-ba24-c219b6ba9770",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "93066b0c-9d25-4fe0-9f25-e5e3bc80d326"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "7092e34c-5551-4f41-802d-e536b5df2161",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "e97f113c-caa2-4502-b1dc-6223fba3cde0",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "6783ae6f-b026-4207-93dc-224fb6c88394",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "0a12a2bd-1de3-46b6-9f6e-c6d084796de2"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "a54b95ae-b6e0-4e59-9afb-ea8deb04e3e5",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "fc4a549d-845f-4b77-a157-8262f17c8e4c",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "145e90ac-7d6c-43e6-9c76-85a717dcdd54",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "b4611f35-d6bd-47d0-a045-4f13166b3d8b",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "72601ca2-fa97-4d43-8bbf-78c9795fa8aa",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "a4c1b5a6-6276-4b09-9564-9a31a9d39d4f",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "2721a549-110f-48ec-9e02-f1394e833f65"
								}
							],
							"id": "8bb7c30d-e3ba-4779-acba-48ed74f7704e",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "4d032af2-bcd5-43b1-8f20-d265fca2b1ba",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "66d0a2ec-f772-49f6-a64a-7e2144c0ae58",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "66c44f43-c595-4387-8796-97a91a3ef71d",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "dbd0c446-ecc8-4fbb-aa0e-670720b454de",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "03c9c5af-567e-48bc-8c25-e0d97881b0b6",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "6bf161ab-49ea-46f2-b12d-0379b8815bed"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "87b5753c-a1b3-414f-a7ff-737545a1452e",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "0e720e61-fb68-4d22-b7b0-18ae272f204b",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "3bfdbe51-718a-4cc0-89b5-4b8ab68fed80",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "eeea7f25-615a-4a0a-8725-cdfe712d80fc",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "07b97ee4-80d9-462f-a2c1-4305e63fbc7e",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "2fc41e6c-76d0-4188-994d-263a74d77d69",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "6483423c-244b-428a-aab4-2468627192b2"
								}
							],
							"id": "36c61ed7-27ad-42d9-b19c-57d207e476fa",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"id": "8a81d824-698f-4ff3-8e4c-8268203f74f2",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "f46b2d7c-62ee-4a52-8024-2c1df7c8bd2c",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "da4e3512-3328-4108-8670-5e87a0b9f5b3"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c5d289ae-15d2-4fa8-81bc-a29f06684123",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "10139bd0-034b-40a9-9782-f9c7c711fa2e",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "ec9ce5ab-871d-482e-96d8-f979be0228d2",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "01adcba0-6e5d-41f9-bfdb-49b4f98c84fb",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "135c5f38-ed73-4d37-bb11-aa2d2b676efc",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "dac71842-b5fe-4039-b823-408f416fc138",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6694f59a-8c7d-4c2a-86ec-51107f0e1b70",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "081e4712-eb2f-44f0-91d0-ad47ce3f3261",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "618b072d-76db-4c09-9f2b-c4f76c078cc1",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "c9182e25-461a-4ef5-94e6-1fbde60923dd",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "295a738b-c184-4b1d-88e7-f4950e61a8f5",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "10d88f7c-f480-419b-9166-0b2f12f00c22",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8f3fe1c4-85c4-48b5-bbc3-fa7c1cd689ef",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "08ecb951-9867-4b37-902a-54e444b8c000",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "a74a67e8-fdd0-4dec-abf6-069c960a4465",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "a6890b1e-e268-4c3d-843a-15fbc86d58d0",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "a7bc72c7-7038-4a52-b43b-1ddb4acc1b29",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3a56ddfa-410d-4ca5-92f4-9d4ec8816af6",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "ab8b5b5b-246e-449c-96ec-f8efc9f4b112"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d8aa77a6-d225-4362-ac42-88963075147e",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "331ccd1e-7f91-4583-b15c-9c361453cbdb",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "c2a277a3-75d1-4fbb-9982-9c591587e720",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d32d9797-7b20-4455-982e-4097c22e038a",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "7eccfeec-fa78-4cf2-a402-73f013d2e55b",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "c1401b65-930d-4366-8cb7-de44889d0a85",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "6bd17850-dcef-4582-ba82-fc10094ba95f",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "5f1f1a4e-c240-4ff7-b0f6-2ec3dbb1783a",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c76bf113-9f55-4d00-b5e1-e6ac5bdf14a7",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "fb3cad1d-3d79-4a54-82bb-15c481abadd0",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "0d107d55-8824-45a9-aa80-87d5fdab1b85",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "53c627a2-7c00-4f15-b088-940b7c1eb2cb",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "01b2e4a9-c1ce-42ee-83f9-c9c0c6dc5f01",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6f149509-9170-4374-a96f-7bb3e1318e9d",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "92b568d6-48a4-4007-a1a8-3c020eff9db8",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "bc37aef0-c77a-4334-bc5d-6f8883906df8",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "fa44ddf7-98aa-43d5-92bd-9ad750beb69c",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7d46c8d6-9810-4b37-9be3-ba30e5ef74f3",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "9dc21af0-8def-4ac8-a05d-3927743d6ba5",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "d5d8d885-7dd4-40c0-a883-0186421f813e",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "5b3d6e3d-db61-444b-b7f7-4ae54693501e",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "113cdcda-dac5-4c61-a737-29dfaad8054b",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ae56e42b-a237-432f-b760-8039a184bc20",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "da9bd068-3547-4fec-b9c4-000d53073617",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "00c9e7b8-e28c-4a11-ba53-624ad9e874e3",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "e12fba32-5da2-44c0-beaf-2fa6d5e4d0ef",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e88a3ad5-1354-4fc1-ba72-98945e818f7c",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "5707c393-442b-4d9f-bc7b-0f8890ddce8e",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "92800b55-3db6-4431-96b6-64b1790c994d",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "5c3f8018-370b-4b71-919c-8306db58a2cf",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "76803213-e93c-435b-bfc4-bf43fe8d99de",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "37b2ddb4-0415-4268-a122-77d04caf36b4",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "32041ae5-4096-4064-869f-defa5872c5ad",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "9e0691b5-7738-4c60-b89e-a8824b685c35",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "f61442cc-a743-43f0-b8a5-9e6d9a2cf28b",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "fb863c4f-feaf-4359-8f12-c89246e6f2a8",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d6d3f196-5fe6-4ee6-9544-b50ec93cad2f",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "66f37230-9b4b-4d88-a891-1537d7516e9f",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "14857626-5070-4350-9ea7-f7a1fc16038f",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "46f12cbb-6bf7-450f-a0d0-79a0f5f5bf40",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3ea98a97-b248-4033-97fc-aadaf861b345",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "741e2161-caa2-4b94-a4ae-163946e4dd3b",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "db9d2de9-60a3-40a2-a70c-ce949b406b73",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "1f1f9beb-8845-4b3c-b730-7c845b50bccc",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "0bfb4e77-5e5b-4b9a-8f22-4222a6075ea0",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "508cf639-a011-4e0e-8e78-69972fa9f11f",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "103fb047-f820-414f-b7bd-24ffa420b4f9",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "b39f8c38-8056-4e3a-a209-d30938289562",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "60c8da0e-a5f9-4b44-9c41-1333118e10be",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4486b84f-be60-46f1-b127-1708b33ee982",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "e918bd25-3f58-4273-a54f-f580fea1a7a1",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "85106989-e879-422f-9966-c0f1f865fdfe",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "7e29b4e5-eb2a-4ed4-9f58-8ad75c3ef4b3",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c78f2fdd-d566-4e3c-b147-d375a39bd98e",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "11f67670-1d98-4ef2-96ac-c585c6bb65ee"
						}
					],
					"id": "e4d3a575-506e-4af5-9ef7-879f973b0cc4",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "846228ef-3cd7-43f6-9221-5541ac93af92",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "dcf0466a-68dd-401a-a510-bf4a2139e8a6",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "d01f74da-47aa-43d1-bf96-09bfdc35f812",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "5069d4bd-b2da-40ec-866b-e7b709c41134",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "52e9f3fd-3e03-450f-8942-e5de37b5b5c7",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "cd90e1fb-5fe1-4db8-a575-21d7657c9725",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "307f0cb6-f460-4214-b42c-88579cd1cdbc",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "812f01be-edbd-4dd6-af25-9ce9e7fb7025",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "a240a1d3-4067-4aec-94f4-36ca6ed3cf9d"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d987ebd1-1847-4216-b3c4-47161e8f84ae",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "decc5169-635c-46d9-95a1-555c84b4eeec",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "7b991717-0f57-4e80-bf2f-81f683259bc9",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "83b02f2d-ce66-4e8a-ac47-8b4cdd4f8636",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "72a22dac-5538-4b67-b107-56e391f83dc1",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "403fb013-10aa-4d85-a6c7-a10147670994",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "8809c2ce-9cc5-4b03-95c8-39501e79895a",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "710bbcb3-4c83-46ce-ac5f-14504fdfb19e"
				}
			],
			"id": "a82ea8e8-c70c-49f4-bd70-4eddd476383a"
		},
		{
			"name": "Tests Copy 8",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2f6086d4-87be-4607-8c46-1c945eab44a7",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4c97e412-232b-4e95-ba13-3cb0c27943e3",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "49e9f18f-7578-47f9-8a2e-f7822c8c1fed",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "4560194e-c51d-403d-92ab-f905e08ec20c"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "956a185b-8104-43c9-b23e-51e5e90b7ff2",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "86655b95-c67d-44f2-9ca5-4ac9547a64dc",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8d8425e5-1a4e-48fe-844e-a28b470c841f",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6fe60e88-30c2-4908-85c2-e4916fa31c13",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a9c0f038-b135-4066-82a2-c5282975b1d3",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d5d221b8-801a-46e9-adb5-2b8e51fb32bb",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "b758c7e8-4046-4198-9a3d-c15db5ec29f3"
						}
					],
					"id": "c8184d57-136c-4c52-9f13-12bc4253f859",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2008641d-f5bd-481c-84b0-9b5c750ff33d",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "658b8325-c6f7-4dff-9afc-7bc79cfa1e4c",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ddfb16be-785a-4691-bf2c-3604a2dc3c72",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "fa2c274a-5b58-47a8-8f74-01433636f46e"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "fcd415c3-b1cf-464a-9b4a-34349a96343d",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0240e082-ace0-4354-bf07-8ceeeadf4725",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "81f5ca0b-0a48-4484-915d-940283b31eb4",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "40d478ab-1f75-4c21-be8f-a9b4712b12a6"
						}
					],
					"id": "c78b6f1c-62c0-4d58-8889-c14b02cb3db3"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "9ba0c7dc-4797-4a92-938c-1658abdeb463",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "3c27daff-f9a6-4ea5-8805-821d7ec3aaa0"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "f185c99b-46ba-4cb6-b3db-2299cf0a2b8f",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "dc802a5b-42f1-41c1-acc1-4e5717d21fe1",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "1c9e7c0c-c787-4697-9a48-0d054be51828",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "0d1a3b33-054f-43af-bc0b-ca68517c5784"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "fa76d206-6a97-4538-9da7-fae239b20761",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "23ab9224-a0f8-4bb3-a945-5b5bf197575c",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "eff4e58f-75f8-4a66-8770-be42e44e2158",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "59c350ff-f7cd-4712-a495-53ca0b32bd58",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "e22e17d5-dda5-440c-8412-d711052b6bce",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "49f24bc1-891b-4649-9879-ae3a6768b84e",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "09f67b22-6728-473c-8c89-972790f2dbb7"
								}
							],
							"id": "58756399-bf93-4c7e-a962-a6b2387c3888",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "bc13de1f-da56-439b-8c88-201b3ff25f54",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "931e4307-4447-4a15-97c2-75acb5fc9bb9",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "34ebba99-f7c3-444c-8409-75ecfeb65f1d",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "74dcdd57-6147-49f6-9065-134d90037033",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "9de34d10-2a0b-4242-a8f0-0e329d85e9b2",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "d0edae14-f73d-4ff4-a7e5-15ffa613a872"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "e74c41b6-2232-4e86-b29c-6f2c2ad2c6fb",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "565d301d-b12f-43c9-bfec-2b4c13fa28ac",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "fefdd654-4622-4260-9d45-1368a344195a",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "ec6805c0-edb1-460b-a55d-d8a4fddce6fd",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "32f8702b-735e-41cf-a8d6-cec5f9610346",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "1fa32d95-87f6-4dab-99ab-12372149f531",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "2524bfb2-2d1f-4da5-877f-c55d46fc4c70"
								}
							],
							"id": "3d981d38-35f0-481a-b6b2-8a9ea13af662",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"id": "1e2c6770-039c-4f9a-bf68-45b422400fbc",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "88fd96e7-3b1e-4435-8d3d-4c31238e0bea",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "f7510eb9-1141-4289-a420-6086112ebcd7"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "709dc2e7-db30-496c-a1ce-86e54e074704",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "18c3531c-3820-4023-9d41-e3faf7821a33",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "3321c80d-301a-4274-848e-a4c90c98a0c8",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "591ddb10-a4b9-4b6b-8869-614c6bdf03df",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "b1a68472-8805-4dcb-afeb-6c03ae59ea9d",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "4df33b91-5391-44b4-b26d-e4c7dbd1a71c",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "05f49215-69a9-4e9d-9319-3418df93762a",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "7c52125d-2bd3-44ab-a049-73582a03bbbd",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "1fd17694-effa-478a-a09e-3bc81335319d",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "8fe4da28-97b9-469d-97f3-839121a3d8be",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "b16b1b9a-ecc8-43ac-a8e9-2c28389dc121",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "146aa8da-575e-4648-baa6-de35953ef21b",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "214fbec8-07b2-4a14-8939-20af6412bcb3",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "06b7128f-eb04-4cc0-89b7-d2a668c59493",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "7fac6630-8068-4dfb-87e0-d06f0adb41da",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "9901eb61-5db9-4bf5-af49-d55561454bb5",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "fbb8e88c-67b4-4936-b15e-249f02b21ff2",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "151f3488-7452-4f5d-a7f5-1f57130f7c2f",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "d71e48a8-88f8-444f-8f2d-96506b149e53"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d0d78445-c0f6-4ea7-b3a3-5ccb6caf8e8e",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "da173a3d-44b8-4b8e-9a77-d77723e63498",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "d38b4843-bed4-41dd-8468-f7fead590ff9",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1d515ced-029d-4c3c-b0b0-ec21dcd874fb",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "64795d32-f6a0-4833-ad2b-5e32ce02bac6",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "20941a0a-18c8-47af-957b-c29a9a68baa9",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "6a57744a-c236-439f-b54c-c95f43685fb7",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "0e2b9d17-8c9d-4d66-817a-771867ddaddd",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "731216cb-4404-41ab-b576-d4264328c6e6",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "6ca2bd3d-945c-4705-a8b7-9e8150b55ca8",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "3375391b-5963-434c-9648-7342f3cded0d",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "d6e9ed5f-bbd0-45b1-a827-dedae3d5427b",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "a6a43d1a-fb93-40c0-aab1-173458c020bf",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e2f6f1d3-76b0-4ca7-8852-b4b303d741d2",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "e6d5079d-0f64-4b22-8be7-5d4769b2ecc7",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "80bf9cc5-00f9-4961-8152-5318010a12fa",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "bae04e28-7370-4df2-8b7f-2453046a5d81",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "48ef8371-d50f-41b3-bd49-95a6e46c9f56",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "0dc4b0e9-0fc1-4899-bb0f-89387f20d667",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "07421135-8945-462a-9506-bd47ca18a630",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "fc7d8229-86c8-4902-9d0e-9bc8c3e03c6a",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "54c3fb93-759d-4624-bb83-a21e3c39e9c4",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "edaa1a11-ed1f-434b-9e60-6b9e24f6d4c3",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b45fc6ac-407d-47e4-b72c-955139f3f4d4",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "edd6ab75-d85b-4253-8da2-e03ef0db3796",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "5c558a68-eabb-4d28-a55e-99126c1e2b13",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4584b0ca-278d-4f57-b23a-64940c286129",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "a3d85cf3-0d6d-403d-b433-6a87595b17a4",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "c3930575-3a40-4b35-b99d-c7f2d96e9858",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "b72b2bcd-78da-435b-8e8b-40dc29cd3486",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "d3d82f5b-cfdf-41ad-a27f-fccab8f1b95c",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "03187e96-cdac-4dd9-809d-a21603c4a79c",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "cd659c5a-fac7-4d5d-966c-2627df2e51c1",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "4ddec5d7-d61b-48f3-a9fb-9bebb42a2a87",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "1e87ded7-4949-4aa6-bfb8-243acbee1fac",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "b41d7f57-566c-4fd4-9e41-277e0ef4d502",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2fb6b655-a9ca-48a0-b668-95f97347c9d5",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "2bccf32e-111d-4366-9077-09ee41a009aa",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "f19aa393-6fcf-416d-8b15-3dc3c9b7d696",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "a5ce12f2-33a8-4f33-9f9b-d8233bfed92e",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "08914617-7ef4-431d-8d80-58b886b5322a",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "85eef2cc-e9aa-4664-b0e5-d34b03732204",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "8cf87270-45ac-49be-8361-c8f8a1fcab57",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "c21cf1fa-929d-4337-a8ed-bb26c8b0ea26",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "c58ac134-d96d-4c6c-b9b2-a08a2055380e",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1498f85d-c0fe-4f5d-ac3b-2340feca64e9",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3dd8b818-31c4-47c7-830b-a112cf626db7",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "c781930b-8be7-4688-b5b4-31a4a0e074c8",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "482731d9-ca3d-491f-8703-d98f62512a3a",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d4740334-79e3-4499-ade8-d3dd1fc46806",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "54a59bc8-724d-4764-bec9-88ba2d45c3be",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "288d8dbd-9551-413e-baa4-8c6a06aaaf78",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "9654b6e1-f437-4bd9-bc89-b08d0f010c62",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c30340ee-9080-47b8-a05f-324b91b50608",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "eeb76a48-3ea3-46ba-9aac-2e290b9a92fe"
						}
					],
					"id": "437f66a0-ba52-474e-a2f7-15f054c4a34d",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "835b22d6-082c-4b55-85df-79ffa971dcc8",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "b030d1a1-763d-4e82-8d68-21f8c88d87d2",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "3e4df6ad-6b46-4e34-9365-946e783df53b",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "c4afd740-a327-4d27-826d-fece81317128",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "54cf6cef-5085-4dd4-9c88-ce366a68f75f",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "24e54c37-9659-4915-9b59-77a24459614f",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2a9826f3-c39c-49bc-b634-6edf315df89c",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "ae00fbbc-5669-430c-b2ff-af863bfc2328",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "0d9691a9-6473-4386-97ad-a2bfac930ef2"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b77fbd09-856d-4641-b9c2-8a3cbbc45670",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "73720cdf-f5b1-4d23-83aa-989a02f3443f",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "5b357a4e-fe26-40b0-87e7-30961f81e0f1",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ab0760ff-05f3-4795-8d4c-5039ffc91c11",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "634bb13d-9ab0-40eb-b0ce-f1f1eabcb47f",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c7851c6e-f6f0-40a9-a4e5-8e925945ba60",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "a9dea758-3e86-430a-8733-ad119d079624",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "de258c86-dc44-4a13-82b1-7907644c428f"
				}
			],
			"id": "65663288-a74b-4920-a5ac-66e6dd1df2d3"
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7d17fb66-c730-42e5-b53a-3ca11e2af5b7",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2e7f29c7-c3ff-43df-8242-9757229aa94b",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "266d58e2-23f3-4179-9bba-78a8ad35b50b",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c07be3d5-ce81-4d9d-a303-87fc1f7afb0a",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "faf6d255-de99-4dc1-b6ef-7efc8d747cc2",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f8cd9f07-fb12-4afa-8a7e-3de5664274c9",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c84f40ea-b34f-4883-8c38-60fcea4ce9bd",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f037e3ea-feec-401a-a049-5c34e5c44f40",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "78f5482d-2372-456c-8856-9312c2a7ebdd",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "08ecf01c-54e6-4e74-bb08-3f82bf41390a",
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "104bae1e-8786-45a5-a546-3a329e9107c6",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7154c8a8-c631-4c70-94c0-6572a68f6c34",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "25a2fe5e-8802-4b16-ac82-c85876f29734",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "f500c494-cd62-4403-b88b-16c95d9b63be",
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "7fbe4963-6065-433b-9078-5732f092879e",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1d130624-43f0-4d9f-8e59-d416d2739387",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "70a619db-199c-4722-bafc-8efdd3a45623",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "e0a83b73-d598-4133-92f6-a99b89f38ac6",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "33349317-bd78-434b-b072-244dfc2c5162",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "ccb5f181-b9c6-4021-92f0-ac57c975024b",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "dcce8d70-4067-4697-ba97-35b4a18808ea",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Cleanup Copy",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b1250582-cb2c-4c8b-b66e-614ee9ebd530",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "36349af8-ad66-425a-b5cb-e1a9a7086a63",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "93ffade7-4944-4925-9d61-6ac603d39783",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9425fdba-dd4f-43ab-95e8-2c7a4fc34d3e",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "24f5800c-c54f-4a94-962b-5ce8eebe9b37",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e9084604-b03e-4ef6-abfb-f88da64c9c01",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6d915c9b-ef45-4d8a-a29b-9bdda91d5b5a",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "622b4577-1d69-4668-8fdf-b97c8c90983a",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "c52e0ca7-8c3c-4de8-9c4e-929092b1a745",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "9152ca50-fe8b-4eac-9d0a-e4cc4c8910fb",
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "2a44f676-28b7-408b-a6a4-c5038b1bb5a2",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a575469c-07c5-42ae-b678-1edcb7e456a9",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "0cf57eb8-311f-490a-9e88-cab68e1cc070",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "bf7412bd-d897-44fc-8937-6b0702891c63",
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "8756e720-1942-4e6c-bed6-d2ac9eae007a",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f556c8b3-5126-4e0c-bd1f-4cae07cf63b3",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5b56d298-af84-4f50-a464-0c4205a868dd",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "712be911-e435-4cb9-a3e6-bdccd02a193a",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "16ad429a-e0d0-4002-9565-d2cbe194d9f0",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "4c4a1196-12da-41f2-b5ef-d9afc16fdb30",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "e4b61538-edc6-4b2b-9dff-5b8ba1860efc",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 2",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fe306769-7c6d-4f87-9b48-d8f91494c8aa",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "958de8d6-2893-429c-aca9-38aec9b2aeaf",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "ec8be920-6bd7-4018-8e17-2dc206e21ca3",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ea73e79f-44f3-4b09-a572-2bebef5a5200",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "2030d748-566b-42e4-a02d-662a7a69654f",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "45f87a24-491a-4333-95ad-da3fdf493e18",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b61da4cf-dbdb-41fc-8361-4a4146c0128c",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "99fecb17-f7a7-4c99-880e-ed2d6b4b633e",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "d691dcd2-b96b-469b-8573-067a3bd2e805",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "d210b5d6-b94c-4f50-8ac1-537176139696",
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "023c7355-a68a-4ce8-9996-c0fb419254f8",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "87e20eb2-3191-49b6-a577-4fbe14ca3888",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "97d196b5-da7d-4acd-b704-e8096d908526",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "5004a9b4-44ca-4e59-82d0-8dbf799d53e8",
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "01185a8a-e073-4a46-af11-675e83473fbb",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b58014d6-495f-42c9-80ae-a3d764723b04",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ca00fc22-c750-4393-817a-46d195d54d67",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "d2dbc379-ae59-45dd-843c-ae977614a19b",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0b679cd8-2faa-49b5-9565-21e61865aeeb",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "80ad6d00-ed8d-4c28-99bc-0c3648c77015",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "bd74bbcf-294e-4fdb-aee5-4269233b578b",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 3",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3c14c8af-5176-4248-bd70-0f1ed9e83448",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ca52a4a8-c2e5-46ed-a81e-2e390dfa77f9",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "2738a162-25ad-4b8b-aa0e-d4793b828b31",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a3c7eb07-0eaa-41d6-b4e2-b06228ea3f2b",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "8847ed70-f1fd-41aa-afbc-9ee4864aa00d",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a5092c6d-de2d-4e86-a361-ed2df8cc4486",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4fbcadf7-27a5-4153-9179-1090ca1a98d5",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "986ac9c2-de1f-4739-a0be-54aef3f379e4",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "39cec476-ccd4-425a-906b-158e94b43359",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "61e3b64d-3b5f-475a-bb0c-a92ea5cc5c0e",
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "5b9f84f7-bfa6-45c2-8775-77ff6aec42ff",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cd27bf1d-87df-48cc-9b16-c1fa3595ce5f",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "a559d667-e24a-44af-a48e-7aa22da53c31",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "45fd738f-5b86-4f5b-bc70-ccbebab0a6fb",
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "b0350776-92d6-42d7-ba4c-5c7304e07a09",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "bededd09-2e12-48f4-bfb7-2bba0f52c8ab",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "84e66bb2-8448-49ba-9dbe-e00c12ad7b9d",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "75032cb0-f268-42ac-b531-4df77b21547c",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2f15ccb0-a432-4f48-a3b4-d4f653789278",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "b8599761-89e4-4f37-86d2-240541c9ae01",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "f86c70f2-88f5-4467-b934-f9b6b0bec98c",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 4",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d956d24d-3816-4d14-b4db-a0bf75b890c9",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9d7de119-54cf-432c-9ecc-f9e0359edc16",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "6d74d0e6-1770-49bb-a6d2-625125745cba",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "71551865-4d07-4848-9229-6090cd835a9a",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "659c196d-0451-408a-a388-e91d8de8cb5e",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "bf5a580c-966b-4837-838d-06b91d81a382",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3b232570-2818-476a-8e00-5bba663ef01c",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0dbf90eb-be5d-4cb5-a9ea-2eeee46b2d89",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "8741e8fe-939a-4295-9514-9d7970472538",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "6f473432-6354-452b-9558-ff7bf9ff4107",
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "8cbd1b98-0265-4219-ac28-9e0757072f6c",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5598fe91-65e5-4ce9-818c-5888a9299a96",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "36e87d54-1075-4963-afda-5b237061835b",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "14be0e61-c13f-4d55-997f-b96fdfa6276c",
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "d09832f7-d299-40bd-9613-f14b422ac11c",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1939e695-fbe8-49d0-98ab-748940c371df",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "516a41ec-0ba6-42c7-baff-800a61d24380",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "89926a3e-bbbc-4e8d-9ee3-f9eb44d81ee2",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "23123089-263c-4b85-9571-74492a2bd12d",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "63d509d2-706c-4b0c-a4f1-ee157fa5d167",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "70708a5e-25e5-4e5a-8617-8084060506e3",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 5",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "69abf696-efd0-437c-bc39-4a3e09a78bc3",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d4a1c468-89bc-425c-b962-df317a3b993f",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "ab454e05-ae7b-4157-a5ab-1b016cbff9b3",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "aa7dd516-1211-436e-9e7d-9c7815a09bc5",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "227dbb39-5971-48ff-81ef-304c6bcfbd1e",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "41850d1a-934e-4691-a465-0e8e9e27b8aa",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "173b82ad-7208-4ebd-9f6b-ea1831e8dcf0",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "16124aa9-0916-455d-a31d-e458a4714f3f",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "71104f80-4ce4-40b3-a458-4f9c9af899b7",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "b7bd02e4-f689-4753-ad83-1348ba32da66",
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "e6930f32-15a7-4d4e-b57f-3d4445f7da04",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7ac6981f-8a19-4c81-9fc6-7ef3ecfcfa4d",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "3ced6d65-29de-4707-9cb7-0bf208d4f8ec",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "316aa532-9c26-421f-a62f-155fa47e64b3",
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "8367faa9-74d0-471f-820e-0fa520b77a32",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "087bbcf8-18e7-481a-b68b-1d6578dc06bb",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3ee3d95c-0f59-4db9-bb93-e4eceb1094ca",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "d507dc0e-aa55-47a8-8f21-bd4f03a60250",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "283e3b18-3c30-4971-8509-88799e91dd8c",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "f1c102d4-3cad-44db-94f3-8d2ca9ed4b63",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "9999c45a-95be-472f-b23f-4d330294f5c8",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 6",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0f09ca58-a329-4815-92bc-796fb3bb9667",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2d299286-7b91-448e-887a-31492db11004",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "46a7abe5-c025-4d1d-8ea7-1bb61af5529e",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "34922ee0-b20d-4115-b745-4f236f0153a5",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "8d22b139-ab87-47e4-ba48-5705ff263cb0",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a4428050-7408-43a2-b6f0-7c50ded5f196",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0ffbea99-b783-4037-8978-15f93c349f84",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9ba18eab-6a7f-43ef-b94c-0ebec8dc7698",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "f445497f-63a1-4401-bd6e-44333fb460dc",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "1e2c977c-9391-4909-b765-9df206ae4ebc",
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "f7c530bb-1029-4222-820f-8caf5887513f",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "31c74784-f069-4a44-be58-64f52b4aa788",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "2d044ade-cab1-4299-995c-18a2baf1bdaf",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "ee31dc41-bf16-4373-82e5-222c0111b12c",
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "44ed61aa-e256-428b-a795-14303ff888f2",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3b74455b-f112-43e2-8d14-7c0edc823ffe",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cf8c45f7-f6f5-4311-94f1-d353d0bb13f0",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "912a0501-a45e-435b-8377-110d298e2c54",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "70b06fac-c2a9-49f0-a754-aee700d266dc",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "726c458e-1064-46d8-a8eb-39bbf2c0a90e",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "bc95d11d-a9f9-46fd-81b1-545640774337",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 7",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c2101ffc-b313-4365-b23c-928a2148f682",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5a331aba-6dea-4d28-a46c-d3b578150dc6",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "558e5e62-d2cd-4437-92c1-a896c9181c6a",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9c43e0ec-f64d-454a-b653-98ff3e67321e",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "4a25b22c-8a37-4045-8eae-c62579152210",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "79f7fa55-7d54-4e86-911a-a5146fd8f7ef",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "eb2a8af8-12bf-430a-ac8f-21f154573141",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d6af6fec-a256-4b8c-b4e1-14cfe4d0bfe0",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "3aaa6eb7-26ae-44e2-8603-96103cf6671f",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "41d8e985-8939-47f0-97fd-e872bc4e2101",
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "664f7eaf-4fa6-44e7-8727-e9f3f9165375",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6e58f9fd-dd67-4ce2-addc-8b11f79cafc6",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "98ed3667-500a-4012-989b-8c0cab70ecad",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "d17cbe2c-96e3-40a4-9124-33bd41a178d7",
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "6ab51dda-c5c7-498b-b3fb-a4f492e98880",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "347f7853-74fe-4e5e-88b4-7442d8680e67",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8620196e-96be-418b-8a44-644df14fc393",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "d8489a5f-6b1f-4edd-8eb2-049703c14651",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c96f4e99-c795-482b-945a-b45b6b6dc92a",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "8622f2bf-9e8b-4b96-951a-6480d33411be",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "e2cd7467-1af7-4d04-8754-17d182b3bd22",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 8",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a00cfe9a-aa2b-4e20-a390-2fd1435fad01",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "449950c7-f435-4d2f-a28f-32cfd30f1dd1",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "7a39bb51-83b1-47f0-9588-ac4184606aab",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4f50a3db-c9d5-47b7-b2d5-1e9a444f2bf1",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "035828a8-2c3d-42e0-a91c-f476525f1d0e",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5aa7b5a3-a0d4-4ea8-b3a1-76bcae885d5d",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "abf5e66b-6b5e-440b-91bf-5962df487624",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "63817a99-226f-4569-8c24-c86184f5f6e7",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "d92a4634-3a61-4821-9a3f-63f16a12a330",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "54c78ee7-748a-47e3-815f-f3948fa2b6cc",
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "d9f521f1-ecd5-4d99-b48b-b5c60d35e6ea",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1ac9e758-9f99-4df1-8d76-54dcba87ce27",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "56004043-5794-4e7c-9adb-25f9c94ff3fb",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "d4179e56-895f-4c67-9c87-20c2f8a5aee1",
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "d103a1da-8792-457c-81d8-a24d0972c3b9",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "03ac20e0-9c07-4466-a4b5-1ebab5b95fc4",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "06830632-b39b-4663-909e-753b65befdd9",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "eccedd7b-d4d5-43f5-b645-20c57e206299",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "07ba3ded-9e68-4269-9072-b6216784e6d3",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "1b6d1e44-f8ae-45bd-99cd-e4c638d76e07",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "1c0d97a6-b764-4b36-a392-9a45646cbfa4",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}